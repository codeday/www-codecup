/**
  * @fileoverview Autogenerated with GraphQL Code Generator
  * DO NOT EDIT!
  */

import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  DateTime: any;
};



export enum ChallengeScoringType {
  Static = 'STATIC',
  DecreaseWithTime = 'DECREASE_WITH_TIME',
  DecreaseWithSolves = 'DECREASE_WITH_SOLVES'
}

export enum ChallengeSolutionType {
  Text = 'TEXT',
  TextSensitive = 'TEXT_SENSITIVE',
  Regex = 'REGEX'
}

export type CreateEditGameInput = {
  name: Scalars['String'];
  visibleAt: Scalars['DateTime'];
  startsAt: Scalars['DateTime'];
  endsAt: Scalars['DateTime'];
  hiddenAt: Scalars['DateTime'];
};


export type FindOneIdInput = {
  id: Scalars['String'];
};











export enum UserRole {
  User = 'USER',
  Captain = 'CAPTAIN'
}

export type ExchangeMutationVariables = Exact<{
  token: Scalars['String'];
}>;


export type ExchangeMutation = { __typename?: 'Mutation', exchange: string };


export const ExchangeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Exchange"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"token"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"exchange"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"token"},"value":{"kind":"Variable","name":{"kind":"Name","value":"token"}}}]}]}}]} as unknown as DocumentNode<ExchangeMutation, ExchangeMutationVariables>;