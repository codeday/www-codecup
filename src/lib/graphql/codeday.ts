/**
  * @fileoverview Autogenerated with GraphQL Code Generator
  * DO NOT EDIT!
  */

import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  CalendarDateTime: any;
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  CalendarJSONObject: any;
  /** The Circle scalar type represents a circle, defined by the coordinates of its center and a radius. The Circle type is used to represent a searchable area together with the '_within_circle' filter. */
  CmsCircle: any;
  /**
   * A date-time string at UTC, such as 2007-12-03T10:15:30Z,
   *     compliant with the 'date-time' format outlined in section 5.6 of
   *     the RFC 3339 profile of the ISO 8601 standard for representation
   *     of dates and times using the Gregorian calendar.
   */
  CmsDateTime: any;
  /** The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`. */
  CmsDimension: any;
  /** The 'HexColor' type represents color in `rgb:ffffff` string format. */
  CmsHexColor: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  CmsJSON: any;
  /** The 'Quality' type represents quality as whole numeric values between `1` and `100`. */
  CmsQuality: any;
  /** The Rectangle scalar type represents a rectangle, defined by the coordinates of its top left and bottom right corners. The Rectangle type is used to represent a searchable area together with the '_within_rectangle' filter. */
  CmsRectangle: any;
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  LabsDateTime: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  LabsJSON: any;
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  LabsJSONObject: any;
  /**
   * A date-time string at UTC, such as 2007-12-03T10:15:30Z,
   *     compliant with the 'date-time' format outlined in section 5.6 of
   *     the RFC 3339 profile of the ISO 8601 standard for representation
   *     of dates and times using the Gregorian calendar.
   */
  LearnDateTime: any;
  /** The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`. */
  LearnDimension: any;
  /** The 'HexColor' type represents color in `rgb:ffffff` string format. */
  LearnHexColor: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  LearnJSON: any;
  /** The 'Quality' type represents quality as whole numeric values between `1` and `100`. */
  LearnQuality: any;
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  ShowYourWorkDateTime: any;
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  ShowcaseDateTime: any;
  /** The `Upload` scalar type represents a file upload. */
  Upload: any;
};


export type AccountDisplayedUserBadgeInput = {
  id: Scalars['ID'];
  order: Scalars['Int'];
};


export enum AccountPizzaOrTurtle {
  Turtle = 'TURTLE',
  Pizza = 'PIZZA'
}





export type AccountUpdateUserInput = {
  username?: Maybe<Scalars['String']>;
  blocked?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  familyName?: Maybe<Scalars['String']>;
  displayNameFormat?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  pronoun?: Maybe<Scalars['String']>;
  acceptTos?: Maybe<Scalars['Boolean']>;
};



export type AccountUserBadgeInput = {
  id: Scalars['ID'];
  displayed?: Maybe<Scalars['Boolean']>;
  order?: Maybe<Scalars['Int']>;
  expiresUtc?: Maybe<Scalars['String']>;
};

export enum AccountUserPictureFit {
  Clamp = 'CLAMP',
  Clip = 'CLIP',
  Crop = 'CROP',
  Facearea = 'FACEAREA',
  Fill = 'FILL',
  Fillmax = 'FILLMAX',
  Max = 'MAX',
  Min = 'MIN',
  Scale = 'SCALE'
}

export type AccountUserPictureTransformInput = {
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  fit?: Maybe<AccountUserPictureFit>;
};

export type AccountUserSearch = {
  givenName?: Maybe<Scalars['String']>;
  familyName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type AccountUserSingleInput = {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  discordId?: Maybe<Scalars['String']>;
};


/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */
export enum BlogAvatarRatingEnum {
  G = 'G',
  Pg = 'PG',
  R = 'R',
  X = 'X'
}


/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogCategoryIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}



/** Arguments for filtering the CategoryToCategoryConnection connection */
export type BlogCategoryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};



/** Arguments for filtering the CategoryToPostConnection connection */
export type BlogCategoryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: Maybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: Maybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Tag Slug */
  tag?: Maybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: Maybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};








/** Arguments for filtering the CommentToCommentConnection connection */
export type BlogCommentToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: Maybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: Maybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of IDs of users whose unapproved comments will be returned by the
   * 							query regardless of status.
   */
  commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: Maybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: Maybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Limit results to those affiliated with a given content object
   * 							ID.
   */
  contentId?: Maybe<Scalars['ID']>;
  /**
   * Array of content object IDs to include affiliated comments
   * 							for.
   */
  contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of content object IDs to exclude affiliated comments
   * 							for.
   */
  contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: Maybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: Maybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: Maybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: Maybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: Maybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: Maybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of parent IDs of comments *not* to retrieve children
   * 							for.
   */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: Maybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: Maybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: Maybe<Scalars['ID']>;
};

/** Options for ordering the connection */
export enum BlogCommentsConnectionOrderbyEnum {
  CommentAgent = 'COMMENT_AGENT',
  CommentApproved = 'COMMENT_APPROVED',
  CommentAuthor = 'COMMENT_AUTHOR',
  CommentAuthorEmail = 'COMMENT_AUTHOR_EMAIL',
  CommentAuthorIp = 'COMMENT_AUTHOR_IP',
  CommentAuthorUrl = 'COMMENT_AUTHOR_URL',
  CommentContent = 'COMMENT_CONTENT',
  CommentDate = 'COMMENT_DATE',
  CommentDateGmt = 'COMMENT_DATE_GMT',
  CommentId = 'COMMENT_ID',
  CommentIn = 'COMMENT_IN',
  CommentKarma = 'COMMENT_KARMA',
  CommentParent = 'COMMENT_PARENT',
  CommentPostId = 'COMMENT_POST_ID',
  CommentType = 'COMMENT_TYPE',
  UserId = 'USER_ID'
}


/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogContentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}



/** Allowed Content Types */
export enum BlogContentTypeEnum {
  /** The Type of Content object */
  Attachment = 'ATTACHMENT',
  /** The Type of Content object */
  Page = 'PAGE',
  /** The Type of Content object */
  Post = 'POST'
}

/** The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID". */
export enum BlogContentTypeIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the content type. */
  Name = 'NAME'
}

/** Input for the createCategory mutation */
export type BlogCreateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The description of the category object */
  description?: Maybe<Scalars['String']>;
  /** The name of the category object to mutate */
  name: Scalars['String'];
  /** The ID of the category that should be set as the parent */
  parentId?: Maybe<Scalars['ID']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: Maybe<Scalars['String']>;
};


/** Input for the createComment mutation */
export type BlogCreateCommentInput = {
  /** User agent used to post the comment. */
  agent?: Maybe<Scalars['String']>;
  /** The approval status of the comment. */
  approved?: Maybe<Scalars['String']>;
  /** The name of the comment's author. */
  author?: Maybe<Scalars['String']>;
  /** The email of the comment's author. */
  authorEmail?: Maybe<Scalars['String']>;
  /** IP address for the comment's author. */
  authorIp?: Maybe<Scalars['String']>;
  /** The url of the comment's author. */
  authorUrl?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The ID of the post object the comment belongs to. */
  commentOn?: Maybe<Scalars['Int']>;
  /** Content of the comment. */
  content?: Maybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: Maybe<Scalars['String']>;
  /** Parent comment of current comment. */
  parent?: Maybe<Scalars['ID']>;
  /** Type of comment. */
  type?: Maybe<Scalars['String']>;
  /** The userID of the comment's author. */
  userId?: Maybe<Scalars['Int']>;
};


/** Input for the createMediaItem mutation */
export type BlogCreateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: Maybe<Scalars['String']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: Maybe<Scalars['ID']>;
  /** The caption for the mediaItem */
  caption?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The comment status for the mediaItem */
  commentStatus?: Maybe<Scalars['String']>;
  /** The date of the mediaItem */
  date?: Maybe<Scalars['String']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: Maybe<Scalars['String']>;
  /** Description of the mediaItem */
  description?: Maybe<Scalars['String']>;
  /** The file name of the mediaItem */
  filePath?: Maybe<Scalars['String']>;
  /** The file type of the mediaItem */
  fileType?: Maybe<BlogMimeTypeEnum>;
  /** The WordPress post ID or the graphQL postId of the parent object */
  parentId?: Maybe<Scalars['ID']>;
  /** The ping status for the mediaItem */
  pingStatus?: Maybe<Scalars['String']>;
  /** The slug of the mediaItem */
  slug?: Maybe<Scalars['String']>;
  /** The status of the mediaItem */
  status?: Maybe<BlogMediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: Maybe<Scalars['String']>;
};


/** Input for the createPage mutation */
export type BlogCreatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: Maybe<Scalars['ID']>;
  clientMutationId: Scalars['String'];
  /** The comment status for the object */
  commentStatus?: Maybe<Scalars['String']>;
  /** The content of the object */
  content?: Maybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
  /** The ID of the parent object */
  parentId?: Maybe<Scalars['ID']>;
  /** The password used to protect the content of the object */
  password?: Maybe<Scalars['String']>;
  /** The slug of the object */
  slug?: Maybe<Scalars['String']>;
  /** The title of the object */
  title?: Maybe<Scalars['String']>;
};


/** Input for the createPostFormat mutation */
export type BlogCreatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The description of the post_format object */
  description?: Maybe<Scalars['String']>;
  /** The name of the post_format object to mutate */
  name: Scalars['String'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: Maybe<Scalars['String']>;
};


/** Input for the createPost mutation */
export type BlogCreatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: Maybe<Scalars['ID']>;
  /** Set connections between the post and categories */
  categories?: Maybe<BlogPostCategoriesInput>;
  clientMutationId: Scalars['String'];
  /** The comment status for the object */
  commentStatus?: Maybe<Scalars['String']>;
  /** The content of the object */
  content?: Maybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: Maybe<Scalars['String']>;
  /** The excerpt of the object */
  excerpt?: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
  /** The password used to protect the content of the object */
  password?: Maybe<Scalars['String']>;
  /** The ping status for the object */
  pingStatus?: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: Maybe<BlogPostPostFormatsInput>;
  /** The slug of the object */
  slug?: Maybe<Scalars['String']>;
  /** Set connections between the post and tags */
  tags?: Maybe<BlogPostTagsInput>;
  /** The title of the object */
  title?: Maybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** Input for the createTag mutation */
export type BlogCreateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The description of the post_tag object */
  description?: Maybe<Scalars['String']>;
  /** The name of the post_tag object to mutate */
  name: Scalars['String'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: Maybe<Scalars['String']>;
};


/** Input for the createUser mutation */
export type BlogCreateUserInput = {
  /** User's AOL IM account. */
  aim?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** A string containing content about the user. */
  description?: Maybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: Maybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: Maybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** User's Jabber account. */
  jabber?: Maybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** User's locale. */
  locale?: Maybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: Maybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: Maybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: Maybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: Maybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: Maybe<Scalars['String']>;
  /** An array of roles to be assigned to the user. */
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A string that contains the user's username for logging in. */
  username: Scalars['String'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: Maybe<Scalars['String']>;
};


/** Date values */
export type BlogDateInput = {
  /** Day of the month (from 1 to 31) */
  day?: Maybe<Scalars['Int']>;
  /** Month number (from 1 to 12) */
  month?: Maybe<Scalars['Int']>;
  /** 4 digit year (e.g. 2017) */
  year?: Maybe<Scalars['Int']>;
};

/** Filter the connection based on input */
export type BlogDateQueryInput = {
  /** Nodes should be returned after this date */
  after?: Maybe<BlogDateInput>;
  /** Nodes should be returned before this date */
  before?: Maybe<BlogDateInput>;
  /** Column to query against */
  column?: Maybe<BlogPostObjectsConnectionDateColumnEnum>;
  /** For after/before, whether exact value should be matched or not */
  compare?: Maybe<Scalars['String']>;
  /** Day of the month (from 1 to 31) */
  day?: Maybe<Scalars['Int']>;
  /** Hour (from 0 to 23) */
  hour?: Maybe<Scalars['Int']>;
  /** For after/before, whether exact value should be matched or not */
  inclusive?: Maybe<Scalars['Boolean']>;
  /** Minute (from 0 to 59) */
  minute?: Maybe<Scalars['Int']>;
  /** Month number (from 1 to 12) */
  month?: Maybe<Scalars['Int']>;
  /** OR or AND, how the sub-arrays should be compared */
  relation?: Maybe<BlogRelationEnum>;
  /** Second (0 to 59) */
  second?: Maybe<Scalars['Int']>;
  /** Week of the year (from 0 to 53) */
  week?: Maybe<Scalars['Int']>;
  /** 4 digit year (e.g. 2017) */
  year?: Maybe<Scalars['Int']>;
};

/** Input for the deleteCategory mutation */
export type BlogDeleteCategoryInput = {
  clientMutationId: Scalars['String'];
  /** The ID of the category to delete */
  id: Scalars['ID'];
};


/** Input for the deleteComment mutation */
export type BlogDeleteCommentInput = {
  clientMutationId: Scalars['String'];
  /** Whether the comment should be force deleted instead of being moved to the trash */
  forceDelete?: Maybe<Scalars['Boolean']>;
  /** The deleted comment ID */
  id: Scalars['ID'];
};


/** Input for the deleteMediaItem mutation */
export type BlogDeleteMediaItemInput = {
  clientMutationId: Scalars['String'];
  /** Whether the mediaItem should be force deleted instead of being moved to the trash */
  forceDelete?: Maybe<Scalars['Boolean']>;
  /** The ID of the mediaItem to delete */
  id: Scalars['ID'];
};


/** Input for the deletePage mutation */
export type BlogDeletePageInput = {
  clientMutationId: Scalars['String'];
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: Maybe<Scalars['Boolean']>;
  /** The ID of the page to delete */
  id: Scalars['ID'];
};


/** Input for the deletePostFormat mutation */
export type BlogDeletePostFormatInput = {
  clientMutationId: Scalars['String'];
  /** The ID of the postFormat to delete */
  id: Scalars['ID'];
};


/** Input for the deletePost mutation */
export type BlogDeletePostInput = {
  clientMutationId: Scalars['String'];
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: Maybe<Scalars['Boolean']>;
  /** The ID of the post to delete */
  id: Scalars['ID'];
};


/** Input for the deleteTag mutation */
export type BlogDeleteTagInput = {
  clientMutationId: Scalars['String'];
  /** The ID of the tag to delete */
  id: Scalars['ID'];
};


/** Input for the deleteUser mutation */
export type BlogDeleteUserInput = {
  clientMutationId: Scalars['String'];
  /** The ID of the user you want to delete */
  id: Scalars['ID'];
  /** Reassign posts and links to new User ID. */
  reassignId?: Maybe<Scalars['ID']>;
};








/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogMediaItemIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a media item by its source url */
  SourceUrl = 'SOURCE_URL'
}


/** The size of the media item object. */
export enum BlogMediaItemSizeEnum {
  /** MediaItem with the large size */
  Large = 'LARGE',
  /** MediaItem with the medium size */
  Medium = 'MEDIUM',
  /** MediaItem with the medium_large size */
  MediumLarge = 'MEDIUM_LARGE',
  /** MediaItem with the thumbnail size */
  Thumbnail = 'THUMBNAIL',
  /** MediaItem with the 1536x1536 size */
  '1536X1536' = '_1536X1536',
  /** MediaItem with the 2048x2048 size */
  '2048X2048' = '_2048X2048'
}

/** The status of the media item object. */
export enum BlogMediaItemStatusEnum {
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the trash status */
  Trash = 'TRASH'
}



/** Arguments for filtering the MediaItemToCommentConnection connection */
export type BlogMediaItemToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: Maybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: Maybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of IDs of users whose unapproved comments will be returned by the
   * 							query regardless of status.
   */
  commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: Maybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: Maybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Limit results to those affiliated with a given content object
   * 							ID.
   */
  contentId?: Maybe<Scalars['ID']>;
  /**
   * Array of content object IDs to include affiliated comments
   * 							for.
   */
  contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of content object IDs to exclude affiliated comments
   * 							for.
   */
  contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: Maybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: Maybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: Maybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: Maybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: Maybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: Maybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of parent IDs of comments *not* to retrieve children
   * 							for.
   */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: Maybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: Maybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: Maybe<Scalars['ID']>;
};








/** Arguments for filtering the MenuItemToMenuItemConnection connection */
export type BlogMenuItemToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: Maybe<BlogMenuLocationEnum>;
};

/** Registered menu locations */
export enum BlogMenuLocationEnum {
  Empty = 'EMPTY'
}



/** Arguments for filtering the MenuToMenuItemConnection connection */
export type BlogMenuToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: Maybe<BlogMenuLocationEnum>;
};

/** The MimeType of the object */
export enum BlogMimeTypeEnum {
  ApplicationJava = 'APPLICATION_JAVA',
  ApplicationMsword = 'APPLICATION_MSWORD',
  ApplicationOctetStream = 'APPLICATION_OCTET_STREAM',
  ApplicationOnenote = 'APPLICATION_ONENOTE',
  ApplicationOxps = 'APPLICATION_OXPS',
  ApplicationPdf = 'APPLICATION_PDF',
  ApplicationRar = 'APPLICATION_RAR',
  ApplicationRtf = 'APPLICATION_RTF',
  ApplicationTtafXml = 'APPLICATION_TTAF_XML',
  ApplicationVndAppleKeynote = 'APPLICATION_VND_APPLE_KEYNOTE',
  ApplicationVndAppleNumbers = 'APPLICATION_VND_APPLE_NUMBERS',
  ApplicationVndApplePages = 'APPLICATION_VND_APPLE_PAGES',
  ApplicationVndMsAccess = 'APPLICATION_VND_MS_ACCESS',
  ApplicationVndMsExcel = 'APPLICATION_VND_MS_EXCEL',
  ApplicationVndMsExcelAddinMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',
  ApplicationVndMsExcelSheetBinaryMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',
  ApplicationVndMsExcelSheetMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',
  ApplicationVndMsExcelTemplateMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',
  ApplicationVndMsPowerpoint = 'APPLICATION_VND_MS_POWERPOINT',
  ApplicationVndMsPowerpointAddinMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',
  ApplicationVndMsPowerpointPresentationMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',
  ApplicationVndMsPowerpointSlideshowMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',
  ApplicationVndMsPowerpointSlideMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',
  ApplicationVndMsPowerpointTemplateMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',
  ApplicationVndMsProject = 'APPLICATION_VND_MS_PROJECT',
  ApplicationVndMsWordDocumentMacroenabled_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',
  ApplicationVndMsWordTemplateMacroenabled_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',
  ApplicationVndMsWrite = 'APPLICATION_VND_MS_WRITE',
  ApplicationVndMsXpsdocument = 'APPLICATION_VND_MS_XPSDOCUMENT',
  ApplicationVndOasisOpendocumentChart = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',
  ApplicationVndOasisOpendocumentDatabase = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',
  ApplicationVndOasisOpendocumentFormula = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',
  ApplicationVndOasisOpendocumentGraphics = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',
  ApplicationVndOasisOpendocumentPresentation = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',
  ApplicationVndOasisOpendocumentSpreadsheet = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',
  ApplicationVndOasisOpendocumentText = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',
  ApplicationWordperfect = 'APPLICATION_WORDPERFECT',
  ApplicationX_7ZCompressed = 'APPLICATION_X_7Z_COMPRESSED',
  ApplicationXGzip = 'APPLICATION_X_GZIP',
  ApplicationXTar = 'APPLICATION_X_TAR',
  ApplicationZip = 'APPLICATION_ZIP',
  AudioAac = 'AUDIO_AAC',
  AudioFlac = 'AUDIO_FLAC',
  AudioMidi = 'AUDIO_MIDI',
  AudioMpeg = 'AUDIO_MPEG',
  AudioOgg = 'AUDIO_OGG',
  AudioWav = 'AUDIO_WAV',
  AudioXMatroska = 'AUDIO_X_MATROSKA',
  AudioXMsWax = 'AUDIO_X_MS_WAX',
  AudioXMsWma = 'AUDIO_X_MS_WMA',
  AudioXRealaudio = 'AUDIO_X_REALAUDIO',
  ImageBmp = 'IMAGE_BMP',
  ImageGif = 'IMAGE_GIF',
  ImageJpeg = 'IMAGE_JPEG',
  ImagePng = 'IMAGE_PNG',
  ImageTiff = 'IMAGE_TIFF',
  ImageXIcon = 'IMAGE_X_ICON',
  TextCalendar = 'TEXT_CALENDAR',
  TextCss = 'TEXT_CSS',
  TextCsv = 'TEXT_CSV',
  TextPlain = 'TEXT_PLAIN',
  TextRichtext = 'TEXT_RICHTEXT',
  TextTabSeparatedValues = 'TEXT_TAB_SEPARATED_VALUES',
  TextVtt = 'TEXT_VTT',
  Video_3Gpp = 'VIDEO_3GPP',
  Video_3Gpp2 = 'VIDEO_3GPP2',
  VideoAvi = 'VIDEO_AVI',
  VideoDivx = 'VIDEO_DIVX',
  VideoMp4 = 'VIDEO_MP4',
  VideoMpeg = 'VIDEO_MPEG',
  VideoOgg = 'VIDEO_OGG',
  VideoQuicktime = 'VIDEO_QUICKTIME',
  VideoWebm = 'VIDEO_WEBM',
  VideoXFlv = 'VIDEO_X_FLV',
  VideoXMatroska = 'VIDEO_X_MATROSKA',
  VideoXMsAsf = 'VIDEO_X_MS_ASF',
  VideoXMsWm = 'VIDEO_X_MS_WM',
  VideoXMsWmv = 'VIDEO_X_MS_WMV',
  VideoXMsWmx = 'VIDEO_X_MS_WMX'
}











/** The cardinality of the connection order */
export enum BlogOrderEnum {
  Asc = 'ASC',
  Desc = 'DESC'
}


/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogPageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}



/** Arguments for filtering the PageToCommentConnection connection */
export type BlogPageToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: Maybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: Maybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of IDs of users whose unapproved comments will be returned by the
   * 							query regardless of status.
   */
  commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: Maybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: Maybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Limit results to those affiliated with a given content object
   * 							ID.
   */
  contentId?: Maybe<Scalars['ID']>;
  /**
   * Array of content object IDs to include affiliated comments
   * 							for.
   */
  contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of content object IDs to exclude affiliated comments
   * 							for.
   */
  contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: Maybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: Maybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: Maybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: Maybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: Maybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: Maybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of parent IDs of comments *not* to retrieve children
   * 							for.
   */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: Maybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: Maybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: Maybe<Scalars['ID']>;
};




/** Arguments for filtering the PageToPageConnection connection */
export type BlogPageToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the pageToRevisionConnection connection */
export type BlogPageToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Set relationships between the post to categories */
export type BlogPostCategoriesInput = {
  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */
  append?: Maybe<Scalars['Boolean']>;
  nodes?: Maybe<Array<Maybe<BlogPostCategoriesNodeInput>>>;
};

/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type BlogPostCategoriesNodeInput = {
  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */
  description?: Maybe<Scalars['String']>;
  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */
  id?: Maybe<Scalars['ID']>;
  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: Maybe<Scalars['String']>;
  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: Maybe<Scalars['String']>;
};


/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogPostFormatIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}



/** Arguments for filtering the PostFormatToPostConnection connection */
export type BlogPostFormatToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: Maybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: Maybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Tag Slug */
  tag?: Maybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: Maybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};


/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogPostIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG'
}

/** The format of post field data. */
export enum BlogPostObjectFieldFormatEnum {
  /** Provide the field value directly from database */
  Raw = 'RAW',
  /** Apply the default WordPress rendering */
  Rendered = 'RENDERED'
}


/** The column to use when filtering by date */
export enum BlogPostObjectsConnectionDateColumnEnum {
  Date = 'DATE',
  Modified = 'MODIFIED'
}

/** Field to order the connection by */
export enum BlogPostObjectsConnectionOrderbyEnum {
  /** Order by author */
  Author = 'AUTHOR',
  /** Order by publish date */
  Date = 'DATE',
  /** Preserve the ID order given in the IN array */
  In = 'IN',
  /** Order by the menu order value */
  MenuOrder = 'MENU_ORDER',
  /** Order by last modified date */
  Modified = 'MODIFIED',
  /** Preserve slug order given in the NAME_IN array */
  NameIn = 'NAME_IN',
  /** Order by parent ID */
  Parent = 'PARENT',
  /** Order by slug */
  Slug = 'SLUG',
  /** Order by title */
  Title = 'TITLE'
}

/** Options for ordering the connection */
export type BlogPostObjectsConnectionOrderbyInput = {
  /** The field to order the connection by */
  field: BlogPostObjectsConnectionOrderbyEnum;
  /** Possible directions in which to order a list of items */
  order: BlogOrderEnum;
};

/** Set relationships between the post to postFormats */
export type BlogPostPostFormatsInput = {
  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */
  append?: Maybe<Scalars['Boolean']>;
  nodes?: Maybe<Array<Maybe<BlogPostPostFormatsNodeInput>>>;
};

/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type BlogPostPostFormatsNodeInput = {
  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */
  description?: Maybe<Scalars['String']>;
  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */
  id?: Maybe<Scalars['ID']>;
  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: Maybe<Scalars['String']>;
  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: Maybe<Scalars['String']>;
};

/** The status of the object. */
export enum BlogPostStatusEnum {
  /** Objects with the acf-disabled status */
  AcfDisabled = 'ACF_DISABLED',
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the draft status */
  Draft = 'DRAFT',
  /** Objects with the future status */
  Future = 'FUTURE',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the pending status */
  Pending = 'PENDING',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the publish status */
  Publish = 'PUBLISH',
  /** Objects with the request-completed status */
  RequestCompleted = 'REQUEST_COMPLETED',
  /** Objects with the request-confirmed status */
  RequestConfirmed = 'REQUEST_CONFIRMED',
  /** Objects with the request-failed status */
  RequestFailed = 'REQUEST_FAILED',
  /** Objects with the request-pending status */
  RequestPending = 'REQUEST_PENDING',
  /** Objects with the trash status */
  Trash = 'TRASH'
}

/** Set relationships between the post to tags */
export type BlogPostTagsInput = {
  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */
  append?: Maybe<Scalars['Boolean']>;
  nodes?: Maybe<Array<Maybe<BlogPostTagsNodeInput>>>;
};

/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type BlogPostTagsNodeInput = {
  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */
  description?: Maybe<Scalars['String']>;
  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */
  id?: Maybe<Scalars['ID']>;
  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: Maybe<Scalars['String']>;
  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the PostToCategoryConnection connection */
export type BlogPostToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};



/** Arguments for filtering the PostToCommentConnection connection */
export type BlogPostToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: Maybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: Maybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of IDs of users whose unapproved comments will be returned by the
   * 							query regardless of status.
   */
  commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: Maybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: Maybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Limit results to those affiliated with a given content object
   * 							ID.
   */
  contentId?: Maybe<Scalars['ID']>;
  /**
   * Array of content object IDs to include affiliated comments
   * 							for.
   */
  contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of content object IDs to exclude affiliated comments
   * 							for.
   */
  contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: Maybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: Maybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: Maybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: Maybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: Maybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: Maybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of parent IDs of comments *not* to retrieve children
   * 							for.
   */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: Maybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: Maybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: Maybe<Scalars['ID']>;
};




/** Arguments for filtering the PostToPostFormatConnection connection */
export type BlogPostToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};



/** Arguments for filtering the postToRevisionConnection connection */
export type BlogPostToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: Maybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: Maybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Tag Slug */
  tag?: Maybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: Maybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the PostToTagConnection connection */
export type BlogPostToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};





/** Input for the registerUser mutation */
export type BlogRegisterUserInput = {
  /** User's AOL IM account. */
  aim?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** A string containing content about the user. */
  description?: Maybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: Maybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: Maybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** User's Jabber account. */
  jabber?: Maybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** User's locale. */
  locale?: Maybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: Maybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: Maybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: Maybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: Maybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: Maybe<Scalars['String']>;
  /** A string that contains the user's username. */
  username: Scalars['String'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: Maybe<Scalars['String']>;
};


/** The logical relation between each item in the array when there are more than one. */
export enum BlogRelationEnum {
  And = 'AND',
  Or = 'OR'
}

/** Input for the resetUserPassword mutation */
export type BlogResetUserPasswordInput = {
  clientMutationId: Scalars['String'];
  /** Password reset key */
  key?: Maybe<Scalars['String']>;
  /** The user's login (username). */
  login?: Maybe<Scalars['String']>;
  /** The new password. */
  password?: Maybe<Scalars['String']>;
};


/** Input for the restoreComment mutation */
export type BlogRestoreCommentInput = {
  clientMutationId: Scalars['String'];
  /** The ID of the comment to be restored */
  id: Scalars['ID'];
};






/** Arguments for filtering the RootQueryToCategoryConnection connection */
export type BlogRootQueryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};



/** Arguments for filtering the RootQueryToCommentConnection connection */
export type BlogRootQueryToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: Maybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: Maybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of IDs of users whose unapproved comments will be returned by the
   * 							query regardless of status.
   */
  commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: Maybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: Maybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Limit results to those affiliated with a given content object
   * 							ID.
   */
  contentId?: Maybe<Scalars['ID']>;
  /**
   * Array of content object IDs to include affiliated comments
   * 							for.
   */
  contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of content object IDs to exclude affiliated comments
   * 							for.
   */
  contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: Maybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: Maybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: Maybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: Maybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: Maybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: Maybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of parent IDs of comments *not* to retrieve children
   * 							for.
   */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: Maybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: Maybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: Maybe<Scalars['ID']>;
};



/** Arguments for filtering the RootQueryToContentNodeConnection connection */
export type BlogRootQueryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the RootQueryToContentRevisionUnionConnection connection */
export type BlogRootQueryToContentRevisionUnionConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};





/** Arguments for filtering the RootQueryToMediaItemConnection connection */
export type BlogRootQueryToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the RootQueryToMenuConnection connection */
export type BlogRootQueryToMenuConnectionWhereArgs = {
  /** The ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: Maybe<BlogMenuLocationEnum>;
  /** The slug of the menu to query items for */
  slug?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the RootQueryToMenuItemConnection connection */
export type BlogRootQueryToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: Maybe<BlogMenuLocationEnum>;
};



/** Arguments for filtering the RootQueryToPageConnection connection */
export type BlogRootQueryToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};





/** Arguments for filtering the RootQueryToPostConnection connection */
export type BlogRootQueryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: Maybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: Maybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Tag Slug */
  tag?: Maybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: Maybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the RootQueryToPostFormatConnection connection */
export type BlogRootQueryToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};



/** Arguments for filtering the RootQueryToTagConnection connection */
export type BlogRootQueryToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};





/** Arguments for filtering the RootQueryToTermNodeConnection connection */
export type BlogRootQueryToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: Maybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: Maybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: Maybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: Maybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: Maybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: Maybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: Maybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: Maybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: Maybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: Maybe<Scalars['String']>;
  /** Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source */
  shouldOnlyIncludeConnectedItems?: Maybe<Scalars['Boolean']>;
  /** Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms */
  shouldOutputInFlatList?: Maybe<Scalars['Boolean']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: Maybe<Array<Maybe<BlogTaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: Maybe<Scalars['Boolean']>;
};





/** Arguments for filtering the RootQueryToUserConnection connection */
export type BlogRootQueryToUserConnectionWhereArgs = {
  /** Array of userIds to exclude. */
  exclude?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Pass an array of post types to filter results to users who have published posts in those post types. */
  hasPublishedPosts?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Array of userIds to include. */
  include?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** The user login. */
  login?: Maybe<Scalars['String']>;
  /** An array of logins to include. Users matching one of these logins will be included in results. */
  loginIn?: Maybe<Scalars['Int']>;
  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */
  loginNotIn?: Maybe<Scalars['Int']>;
  /** The user nicename. */
  nicename?: Maybe<Scalars['String']>;
  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */
  nicenameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */
  nicenameNotIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogUsersConnectionOrderbyInput>>>;
  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */
  role?: Maybe<BlogUserRoleEnum>;
  /** An array of role names. Matched users must have at least one of these roles. */
  roleIn?: Maybe<Array<Maybe<BlogUserRoleEnum>>>;
  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */
  roleNotIn?: Maybe<Array<Maybe<BlogUserRoleEnum>>>;
  /** Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string. */
  search?: Maybe<Scalars['String']>;
  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */
  searchColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
};



/** Input for the sendPasswordResetEmail mutation */
export type BlogSendPasswordResetEmailInput = {
  clientMutationId: Scalars['String'];
  /** A string that contains the user's username or email address. */
  username: Scalars['String'];
};




/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogTagIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}



/** Arguments for filtering the TagToPostConnection connection */
export type BlogTagToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: Maybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: Maybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Tag Slug */
  tag?: Maybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: Maybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Allowed taxonomies */
export enum BlogTaxonomyEnum {
  Category = 'CATEGORY',
  Postformat = 'POSTFORMAT',
  Tag = 'TAG'
}

/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID". */
export enum BlogTaxonomyIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the taxonomy */
  Name = 'NAME'
}


/** The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field. */
export enum BlogTermNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}


/** Options for ordering the connection by */
export enum BlogTermObjectsConnectionOrderbyEnum {
  Count = 'COUNT',
  Description = 'DESCRIPTION',
  Name = 'NAME',
  Slug = 'SLUG',
  TermGroup = 'TERM_GROUP',
  TermId = 'TERM_ID',
  TermOrder = 'TERM_ORDER'
}



/** Input for the UpdateCategory mutation */
export type BlogUpdateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The description of the category object */
  description?: Maybe<Scalars['String']>;
  /** The ID of the category object to update */
  id: Scalars['ID'];
  /** The name of the category object to mutate */
  name?: Maybe<Scalars['String']>;
  /** The ID of the category that should be set as the parent */
  parentId?: Maybe<Scalars['ID']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: Maybe<Scalars['String']>;
};


/** Input for the updateComment mutation */
export type BlogUpdateCommentInput = {
  /** User agent used to post the comment. */
  agent?: Maybe<Scalars['String']>;
  /** The approval status of the comment. */
  approved?: Maybe<Scalars['String']>;
  /** The name of the comment's author. */
  author?: Maybe<Scalars['String']>;
  /** The email of the comment's author. */
  authorEmail?: Maybe<Scalars['String']>;
  /** IP address for the comment's author. */
  authorIp?: Maybe<Scalars['String']>;
  /** The url of the comment's author. */
  authorUrl?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The ID of the post object the comment belongs to. */
  commentOn?: Maybe<Scalars['Int']>;
  /** Content of the comment. */
  content?: Maybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: Maybe<Scalars['String']>;
  /** The ID of the comment being updated. */
  id: Scalars['ID'];
  /** Parent comment of current comment. */
  parent?: Maybe<Scalars['ID']>;
  /** Type of comment. */
  type?: Maybe<Scalars['String']>;
  /** The userID of the comment's author. */
  userId?: Maybe<Scalars['Int']>;
};


/** Input for the updateMediaItem mutation */
export type BlogUpdateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: Maybe<Scalars['String']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: Maybe<Scalars['ID']>;
  /** The caption for the mediaItem */
  caption?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The comment status for the mediaItem */
  commentStatus?: Maybe<Scalars['String']>;
  /** The date of the mediaItem */
  date?: Maybe<Scalars['String']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: Maybe<Scalars['String']>;
  /** Description of the mediaItem */
  description?: Maybe<Scalars['String']>;
  /** The file name of the mediaItem */
  filePath?: Maybe<Scalars['String']>;
  /** The file type of the mediaItem */
  fileType?: Maybe<BlogMimeTypeEnum>;
  /** The ID of the mediaItem object */
  id: Scalars['ID'];
  /** The WordPress post ID or the graphQL postId of the parent object */
  parentId?: Maybe<Scalars['ID']>;
  /** The ping status for the mediaItem */
  pingStatus?: Maybe<Scalars['String']>;
  /** The slug of the mediaItem */
  slug?: Maybe<Scalars['String']>;
  /** The status of the mediaItem */
  status?: Maybe<BlogMediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: Maybe<Scalars['String']>;
};


/** Input for the updatePage mutation */
export type BlogUpdatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: Maybe<Scalars['ID']>;
  clientMutationId: Scalars['String'];
  /** The comment status for the object */
  commentStatus?: Maybe<Scalars['String']>;
  /** The content of the object */
  content?: Maybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: Maybe<Scalars['String']>;
  /** The ID of the page object */
  id: Scalars['ID'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
  /** The ID of the parent object */
  parentId?: Maybe<Scalars['ID']>;
  /** The password used to protect the content of the object */
  password?: Maybe<Scalars['String']>;
  /** The slug of the object */
  slug?: Maybe<Scalars['String']>;
  /** The title of the object */
  title?: Maybe<Scalars['String']>;
};


/** Input for the UpdatePostFormat mutation */
export type BlogUpdatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The description of the post_format object */
  description?: Maybe<Scalars['String']>;
  /** The ID of the postFormat object to update */
  id: Scalars['ID'];
  /** The name of the post_format object to mutate */
  name?: Maybe<Scalars['String']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: Maybe<Scalars['String']>;
};


/** Input for the updatePost mutation */
export type BlogUpdatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: Maybe<Scalars['ID']>;
  /** Set connections between the post and categories */
  categories?: Maybe<BlogPostCategoriesInput>;
  clientMutationId: Scalars['String'];
  /** The comment status for the object */
  commentStatus?: Maybe<Scalars['String']>;
  /** The content of the object */
  content?: Maybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: Maybe<Scalars['String']>;
  /** The excerpt of the object */
  excerpt?: Maybe<Scalars['String']>;
  /** The ID of the post object */
  id: Scalars['ID'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
  /** The password used to protect the content of the object */
  password?: Maybe<Scalars['String']>;
  /** The ping status for the object */
  pingStatus?: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: Maybe<BlogPostPostFormatsInput>;
  /** The slug of the object */
  slug?: Maybe<Scalars['String']>;
  /** Set connections between the post and tags */
  tags?: Maybe<BlogPostTagsInput>;
  /** The title of the object */
  title?: Maybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** Input for the updateSettings mutation */
export type BlogUpdateSettingsInput = {
  clientMutationId: Scalars['String'];
  /** Allow people to submit comments on new posts. */
  discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']>;
  /** A date format for all date strings. */
  generalSettingsDateFormat?: Maybe<Scalars['String']>;
  /** Site tagline. */
  generalSettingsDescription?: Maybe<Scalars['String']>;
  /** This address is used for admin purposes, like new user notification. */
  generalSettingsEmail?: Maybe<Scalars['String']>;
  /** WordPress locale code. */
  generalSettingsLanguage?: Maybe<Scalars['String']>;
  /** A day number of the week that the week should start on. */
  generalSettingsStartOfWeek?: Maybe<Scalars['Int']>;
  /** A time format for all time strings. */
  generalSettingsTimeFormat?: Maybe<Scalars['String']>;
  /** A city in the same timezone as you. */
  generalSettingsTimezone?: Maybe<Scalars['String']>;
  /** Site title. */
  generalSettingsTitle?: Maybe<Scalars['String']>;
  /** Site URL. */
  generalSettingsUrl?: Maybe<Scalars['String']>;
  /** Blog pages show at most. */
  readingSettingsPostsPerPage?: Maybe<Scalars['Int']>;
  /** Default post category. */
  writingSettingsDefaultCategory?: Maybe<Scalars['Int']>;
  /** Default post format. */
  writingSettingsDefaultPostFormat?: Maybe<Scalars['String']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  writingSettingsUseSmilies?: Maybe<Scalars['Boolean']>;
};


/** Input for the UpdateTag mutation */
export type BlogUpdateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** The description of the post_tag object */
  description?: Maybe<Scalars['String']>;
  /** The ID of the tag object to update */
  id: Scalars['ID'];
  /** The name of the post_tag object to mutate */
  name?: Maybe<Scalars['String']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: Maybe<Scalars['String']>;
};


/** Input for the updateUser mutation */
export type BlogUpdateUserInput = {
  /** User's AOL IM account. */
  aim?: Maybe<Scalars['String']>;
  clientMutationId: Scalars['String'];
  /** A string containing content about the user. */
  description?: Maybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: Maybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: Maybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The ID of the user */
  id: Scalars['ID'];
  /** User's Jabber account. */
  jabber?: Maybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** User's locale. */
  locale?: Maybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: Maybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: Maybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: Maybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: Maybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: Maybe<Scalars['String']>;
  /** An array of roles to be assigned to the user. */
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: Maybe<Scalars['String']>;
};



/** The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID". */
export enum BlogUserNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The Email of the User */
  Email = 'EMAIL',
  /** The hashed Global ID */
  Id = 'ID',
  /** The slug of the User */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI',
  /** The username the User uses to login with */
  Username = 'USERNAME'
}


/** Names of available user roles */
export enum BlogUserRoleEnum {
  Administrator = 'ADMINISTRATOR',
  Author = 'AUTHOR',
  Contributor = 'CONTRIBUTOR',
  Editor = 'EDITOR',
  Subscriber = 'SUBSCRIBER'
}



/** Arguments for filtering the UserToCommentConnection connection */
export type BlogUserToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: Maybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: Maybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of IDs of users whose unapproved comments will be returned by the
   * 							query regardless of status.
   */
  commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: Maybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: Maybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Limit results to those affiliated with a given content object
   * 							ID.
   */
  contentId?: Maybe<Scalars['ID']>;
  /**
   * Array of content object IDs to include affiliated comments
   * 							for.
   */
  contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of content object IDs to exclude affiliated comments
   * 							for.
   */
  contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: Maybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: Maybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: Maybe<Array<Maybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: Maybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: Maybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: Maybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: Maybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Array of parent IDs of comments *not* to retrieve children
   * 							for.
   */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: Maybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: Maybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: Maybe<Scalars['ID']>;
};



/** Arguments for filtering the UserToContentRevisionUnionConnection connection */
export type BlogUserToContentRevisionUnionConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the UserToMediaItemConnection connection */
export type BlogUserToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the UserToPageConnection connection */
export type BlogUserToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Arguments for filtering the UserToPostConnection connection */
export type BlogUserToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: Maybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: Maybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: Maybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: Maybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: Maybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: Maybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: Maybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: Maybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: Maybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: Maybe<Array<Maybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: Maybe<Scalars['String']>;
  /** Specify objects whose parent is in an array */
  parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: Maybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: Maybe<Scalars['String']>;
  /** Tag Slug */
  tag?: Maybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: Maybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Title of the object */
  title?: Maybe<Scalars['String']>;
};



/** Field to order the connection by */
export enum BlogUsersConnectionOrderbyEnum {
  /** Order by display name */
  DisplayName = 'DISPLAY_NAME',
  /** Order by email address */
  Email = 'EMAIL',
  /** Order by login */
  Login = 'LOGIN',
  /** Preserve the login order given in the LOGIN_IN array */
  LoginIn = 'LOGIN_IN',
  /** Order by nice name */
  NiceName = 'NICE_NAME',
  /** Preserve the nice name order given in the NICE_NAME_IN array */
  NiceNameIn = 'NICE_NAME_IN',
  /** Order by registration date */
  Registered = 'REGISTERED',
  /** Order by URL */
  Url = 'URL'
}

/** Options for ordering the connection */
export type BlogUsersConnectionOrderbyInput = {
  field: BlogUsersConnectionOrderbyEnum;
  order?: Maybe<BlogOrderEnum>;
};





export enum CalendarFormat {
  Html = 'HTML',
  Markdown = 'MARKDOWN',
  Discord = 'DISCORD'
}


export enum CalendarOrder {
  Asc = 'ASC',
  Desc = 'DESC'
}




export type CmsAnnouncementFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  displayAt_exists?: Maybe<Scalars['Boolean']>;
  displayAt?: Maybe<Scalars['CmsDateTime']>;
  displayAt_not?: Maybe<Scalars['CmsDateTime']>;
  displayAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  displayAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  displayAt_gt?: Maybe<Scalars['CmsDateTime']>;
  displayAt_gte?: Maybe<Scalars['CmsDateTime']>;
  displayAt_lt?: Maybe<Scalars['CmsDateTime']>;
  displayAt_lte?: Maybe<Scalars['CmsDateTime']>;
  endAt_exists?: Maybe<Scalars['Boolean']>;
  endAt?: Maybe<Scalars['CmsDateTime']>;
  endAt_not?: Maybe<Scalars['CmsDateTime']>;
  endAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  endAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  endAt_gt?: Maybe<Scalars['CmsDateTime']>;
  endAt_gte?: Maybe<Scalars['CmsDateTime']>;
  endAt_lt?: Maybe<Scalars['CmsDateTime']>;
  endAt_lte?: Maybe<Scalars['CmsDateTime']>;
  oneline_exists?: Maybe<Scalars['Boolean']>;
  oneline?: Maybe<Scalars['String']>;
  oneline_not?: Maybe<Scalars['String']>;
  oneline_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  oneline_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  oneline_contains?: Maybe<Scalars['String']>;
  oneline_not_contains?: Maybe<Scalars['String']>;
  link_exists?: Maybe<Scalars['Boolean']>;
  link?: Maybe<Scalars['String']>;
  link_not?: Maybe<Scalars['String']>;
  link_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_contains?: Maybe<Scalars['String']>;
  link_not_contains?: Maybe<Scalars['String']>;
  visibility_exists?: Maybe<Scalars['Boolean']>;
  visibility?: Maybe<Scalars['String']>;
  visibility_not?: Maybe<Scalars['String']>;
  visibility_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  visibility_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  visibility_contains?: Maybe<Scalars['String']>;
  visibility_not_contains?: Maybe<Scalars['String']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  programCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsAnnouncementFilter>>>;
  AND?: Maybe<Array<Maybe<CmsAnnouncementFilter>>>;
};


export enum CmsAnnouncementOrder {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  DisplayAtAsc = 'displayAt_ASC',
  DisplayAtDesc = 'displayAt_DESC',
  EndAtAsc = 'endAt_ASC',
  EndAtDesc = 'endAt_DESC',
  OnelineAsc = 'oneline_ASC',
  OnelineDesc = 'oneline_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  VisibilityAsc = 'visibility_ASC',
  VisibilityDesc = 'visibility_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}




export type CmsAssetFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  size_exists?: Maybe<Scalars['Boolean']>;
  size?: Maybe<Scalars['Int']>;
  size_not?: Maybe<Scalars['Int']>;
  size_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  size_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  size_gt?: Maybe<Scalars['Int']>;
  size_gte?: Maybe<Scalars['Int']>;
  size_lt?: Maybe<Scalars['Int']>;
  size_lte?: Maybe<Scalars['Int']>;
  contentType_exists?: Maybe<Scalars['Boolean']>;
  contentType?: Maybe<Scalars['String']>;
  contentType_not?: Maybe<Scalars['String']>;
  contentType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType_contains?: Maybe<Scalars['String']>;
  contentType_not_contains?: Maybe<Scalars['String']>;
  fileName_exists?: Maybe<Scalars['Boolean']>;
  fileName?: Maybe<Scalars['String']>;
  fileName_not?: Maybe<Scalars['String']>;
  fileName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileName_contains?: Maybe<Scalars['String']>;
  fileName_not_contains?: Maybe<Scalars['String']>;
  width_exists?: Maybe<Scalars['Boolean']>;
  width?: Maybe<Scalars['Int']>;
  width_not?: Maybe<Scalars['Int']>;
  width_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  width_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  width_gt?: Maybe<Scalars['Int']>;
  width_gte?: Maybe<Scalars['Int']>;
  width_lt?: Maybe<Scalars['Int']>;
  width_lte?: Maybe<Scalars['Int']>;
  height_exists?: Maybe<Scalars['Boolean']>;
  height?: Maybe<Scalars['Int']>;
  height_not?: Maybe<Scalars['Int']>;
  height_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  height_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  height_gt?: Maybe<Scalars['Int']>;
  height_gte?: Maybe<Scalars['Int']>;
  height_lt?: Maybe<Scalars['Int']>;
  height_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<Maybe<CmsAssetFilter>>>;
  AND?: Maybe<Array<Maybe<CmsAssetFilter>>>;
};


export enum CmsAssetOrder {
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  ContentTypeAsc = 'contentType_ASC',
  ContentTypeDesc = 'contentType_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type CmsAwardFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  ranking_exists?: Maybe<Scalars['Boolean']>;
  ranking?: Maybe<Scalars['Int']>;
  ranking_not?: Maybe<Scalars['Int']>;
  ranking_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ranking_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ranking_gt?: Maybe<Scalars['Int']>;
  ranking_gte?: Maybe<Scalars['Int']>;
  ranking_lt?: Maybe<Scalars['Int']>;
  ranking_lte?: Maybe<Scalars['Int']>;
  icon_exists?: Maybe<Scalars['Boolean']>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  programsCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsAwardFilter>>>;
  AND?: Maybe<Array<Maybe<CmsAwardFilter>>>;
};


export enum CmsAwardOrder {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  RankingAsc = 'ranking_ASC',
  RankingDesc = 'ranking_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}




export type CmsBadgeFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  emoji_exists?: Maybe<Scalars['Boolean']>;
  emoji?: Maybe<Scalars['String']>;
  emoji_not?: Maybe<Scalars['String']>;
  emoji_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  emoji_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  emoji_contains?: Maybe<Scalars['String']>;
  emoji_not_contains?: Maybe<Scalars['String']>;
  image_exists?: Maybe<Scalars['Boolean']>;
  earnCriteria_exists?: Maybe<Scalars['Boolean']>;
  earnCriteria?: Maybe<Scalars['String']>;
  earnCriteria_not?: Maybe<Scalars['String']>;
  earnCriteria_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  earnCriteria_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  earnCriteria_contains?: Maybe<Scalars['String']>;
  earnCriteria_not_contains?: Maybe<Scalars['String']>;
  earnMessage_exists?: Maybe<Scalars['Boolean']>;
  earnMessage?: Maybe<Scalars['String']>;
  earnMessage_not?: Maybe<Scalars['String']>;
  earnMessage_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  earnMessage_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  earnMessage_contains?: Maybe<Scalars['String']>;
  earnMessage_not_contains?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<Maybe<CmsBadgeFilter>>>;
  AND?: Maybe<Array<Maybe<CmsBadgeFilter>>>;
};


export enum CmsBadgeOrder {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EmojiAsc = 'emoji_ASC',
  EmojiDesc = 'emoji_DESC',
  EarnCriteriaAsc = 'earnCriteria_ASC',
  EarnCriteriaDesc = 'earnCriteria_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type CmsBumperFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  purpose_exists?: Maybe<Scalars['Boolean']>;
  purpose_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  ambient_exists?: Maybe<Scalars['Boolean']>;
  ambient?: Maybe<Scalars['Boolean']>;
  ambient_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsBumperFilter>>>;
  AND?: Maybe<Array<Maybe<CmsBumperFilter>>>;
};


export enum CmsBumperOrder {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  AmbientAsc = 'ambient_ASC',
  AmbientDesc = 'ambient_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}




export type CmsCommunityPartnerFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  audience_exists?: Maybe<Scalars['Boolean']>;
  audience_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  audience_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  audience_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo_exists?: Maybe<Scalars['Boolean']>;
  blurb_exists?: Maybe<Scalars['Boolean']>;
  blurb?: Maybe<Scalars['String']>;
  blurb_not?: Maybe<Scalars['String']>;
  blurb_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blurb_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blurb_contains?: Maybe<Scalars['String']>;
  blurb_not_contains?: Maybe<Scalars['String']>;
  details_exists?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  details_not?: Maybe<Scalars['String']>;
  details_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  details_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  details_contains?: Maybe<Scalars['String']>;
  details_not_contains?: Maybe<Scalars['String']>;
  eligibility_exists?: Maybe<Scalars['Boolean']>;
  eligibility?: Maybe<Scalars['String']>;
  eligibility_not?: Maybe<Scalars['String']>;
  eligibility_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  eligibility_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  eligibility_contains?: Maybe<Scalars['String']>;
  eligibility_not_contains?: Maybe<Scalars['String']>;
  cost_exists?: Maybe<Scalars['Boolean']>;
  cost?: Maybe<Scalars['Int']>;
  cost_not?: Maybe<Scalars['Int']>;
  cost_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cost_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cost_gt?: Maybe<Scalars['Int']>;
  cost_gte?: Maybe<Scalars['Int']>;
  cost_lt?: Maybe<Scalars['Int']>;
  cost_lte?: Maybe<Scalars['Int']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  displayUrl_exists?: Maybe<Scalars['Boolean']>;
  displayUrl?: Maybe<Scalars['String']>;
  displayUrl_not?: Maybe<Scalars['String']>;
  displayUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayUrl_contains?: Maybe<Scalars['String']>;
  displayUrl_not_contains?: Maybe<Scalars['String']>;
  expires_exists?: Maybe<Scalars['Boolean']>;
  expires?: Maybe<Scalars['CmsDateTime']>;
  expires_not?: Maybe<Scalars['CmsDateTime']>;
  expires_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  expires_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  expires_gt?: Maybe<Scalars['CmsDateTime']>;
  expires_gte?: Maybe<Scalars['CmsDateTime']>;
  expires_lt?: Maybe<Scalars['CmsDateTime']>;
  expires_lte?: Maybe<Scalars['CmsDateTime']>;
  regionCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsCommunityPartnerFilter>>>;
  AND?: Maybe<Array<Maybe<CmsCommunityPartnerFilter>>>;
};


export enum CmsCommunityPartnerOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  BlurbAsc = 'blurb_ASC',
  BlurbDesc = 'blurb_DESC',
  EligibilityAsc = 'eligibility_ASC',
  EligibilityDesc = 'eligibility_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  DisplayUrlAsc = 'displayUrl_ASC',
  DisplayUrlDesc = 'displayUrl_DESC',
  ExpiresAsc = 'expires_ASC',
  ExpiresDesc = 'expires_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}




export type CmsContentTypeStringFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  key_exists?: Maybe<Scalars['Boolean']>;
  key?: Maybe<Scalars['String']>;
  key_not?: Maybe<Scalars['String']>;
  key_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  key_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  key_contains?: Maybe<Scalars['String']>;
  key_not_contains?: Maybe<Scalars['String']>;
  value_exists?: Maybe<Scalars['Boolean']>;
  value?: Maybe<Scalars['String']>;
  value_not?: Maybe<Scalars['String']>;
  value_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value_contains?: Maybe<Scalars['String']>;
  value_not_contains?: Maybe<Scalars['String']>;
  richValue_exists?: Maybe<Scalars['Boolean']>;
  richValue_contains?: Maybe<Scalars['String']>;
  richValue_not_contains?: Maybe<Scalars['String']>;
  subvalueCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsContentTypeStringFilter>>>;
  AND?: Maybe<Array<Maybe<CmsContentTypeStringFilter>>>;
};


export enum CmsContentTypeStringOrder {
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}







export type CmsContentfulMetadataFilter = {
  tags_exists?: Maybe<Scalars['Boolean']>;
  tags?: Maybe<CmsContentfulMetadataTagsFilter>;
};

export type CmsContentfulMetadataTagsFilter = {
  id_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
};






export type CmsEntryFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  OR?: Maybe<Array<Maybe<CmsEntryFilter>>>;
  AND?: Maybe<Array<Maybe<CmsEntryFilter>>>;
};

export enum CmsEntryOrder {
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type CmsEventFilter = {
  program?: Maybe<CmscfProgramNestedFilter>;
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  program_exists?: Maybe<Scalars['Boolean']>;
  registrationsOpenAt_exists?: Maybe<Scalars['Boolean']>;
  registrationsOpenAt?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_not?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt_gt?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_gte?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_lt?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_lte?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_exists?: Maybe<Scalars['Boolean']>;
  registrationsCloseAt?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_not?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsCloseAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsCloseAt_gt?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_gte?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_lt?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_lte?: Maybe<Scalars['CmsDateTime']>;
  startsAt_exists?: Maybe<Scalars['Boolean']>;
  startsAt?: Maybe<Scalars['CmsDateTime']>;
  startsAt_not?: Maybe<Scalars['CmsDateTime']>;
  startsAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  startsAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  startsAt_gt?: Maybe<Scalars['CmsDateTime']>;
  startsAt_gte?: Maybe<Scalars['CmsDateTime']>;
  startsAt_lt?: Maybe<Scalars['CmsDateTime']>;
  startsAt_lte?: Maybe<Scalars['CmsDateTime']>;
  endsAt_exists?: Maybe<Scalars['Boolean']>;
  endsAt?: Maybe<Scalars['CmsDateTime']>;
  endsAt_not?: Maybe<Scalars['CmsDateTime']>;
  endsAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  endsAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  endsAt_gt?: Maybe<Scalars['CmsDateTime']>;
  endsAt_gte?: Maybe<Scalars['CmsDateTime']>;
  endsAt_lt?: Maybe<Scalars['CmsDateTime']>;
  endsAt_lte?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_exists?: Maybe<Scalars['Boolean']>;
  awardsAt?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_not?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  awardsAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  awardsAt_gt?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_gte?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_lt?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_lte?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_exists?: Maybe<Scalars['Boolean']>;
  calendarReleaseDate?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_not?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate_gt?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_gte?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_lt?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_lte?: Maybe<Scalars['CmsDateTime']>;
  notice_exists?: Maybe<Scalars['Boolean']>;
  notice_contains?: Maybe<Scalars['String']>;
  notice_not_contains?: Maybe<Scalars['String']>;
  theme_exists?: Maybe<Scalars['Boolean']>;
  theme?: Maybe<Scalars['String']>;
  theme_not?: Maybe<Scalars['String']>;
  theme_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  theme_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  theme_contains?: Maybe<Scalars['String']>;
  theme_not_contains?: Maybe<Scalars['String']>;
  themeBackgroundsCollection_exists?: Maybe<Scalars['Boolean']>;
  themeLogoBackgroundsCollection_exists?: Maybe<Scalars['Boolean']>;
  kickoffVideo_exists?: Maybe<Scalars['Boolean']>;
  kickoffVideoCaptions_exists?: Maybe<Scalars['Boolean']>;
  participantRoleId_exists?: Maybe<Scalars['Boolean']>;
  participantRoleId?: Maybe<Scalars['String']>;
  participantRoleId_not?: Maybe<Scalars['String']>;
  participantRoleId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  participantRoleId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  participantRoleId_contains?: Maybe<Scalars['String']>;
  participantRoleId_not_contains?: Maybe<Scalars['String']>;
  statEventCount_exists?: Maybe<Scalars['Boolean']>;
  statEventCount?: Maybe<Scalars['Int']>;
  statEventCount_not?: Maybe<Scalars['Int']>;
  statEventCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statEventCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statEventCount_gt?: Maybe<Scalars['Int']>;
  statEventCount_gte?: Maybe<Scalars['Int']>;
  statEventCount_lt?: Maybe<Scalars['Int']>;
  statEventCount_lte?: Maybe<Scalars['Int']>;
  statStudentCount_exists?: Maybe<Scalars['Boolean']>;
  statStudentCount?: Maybe<Scalars['Int']>;
  statStudentCount_not?: Maybe<Scalars['Int']>;
  statStudentCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statStudentCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statStudentCount_gt?: Maybe<Scalars['Int']>;
  statStudentCount_gte?: Maybe<Scalars['Int']>;
  statStudentCount_lt?: Maybe<Scalars['Int']>;
  statStudentCount_lte?: Maybe<Scalars['Int']>;
  statLowInterestCount_exists?: Maybe<Scalars['Boolean']>;
  statLowInterestCount?: Maybe<Scalars['Int']>;
  statLowInterestCount_not?: Maybe<Scalars['Int']>;
  statLowInterestCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestCount_gt?: Maybe<Scalars['Int']>;
  statLowInterestCount_gte?: Maybe<Scalars['Int']>;
  statLowInterestCount_lt?: Maybe<Scalars['Int']>;
  statLowInterestCount_lte?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_exists?: Maybe<Scalars['Boolean']>;
  statLowInterestContinuedCount?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_not?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestContinuedCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestContinuedCount_gt?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_gte?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_lt?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_lte?: Maybe<Scalars['Int']>;
  postersCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsEventFilter>>>;
  AND?: Maybe<Array<Maybe<CmsEventFilter>>>;
};






export enum CmsEventOrder {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  RegistrationsOpenAtAsc = 'registrationsOpenAt_ASC',
  RegistrationsOpenAtDesc = 'registrationsOpenAt_DESC',
  RegistrationsCloseAtAsc = 'registrationsCloseAt_ASC',
  RegistrationsCloseAtDesc = 'registrationsCloseAt_DESC',
  StartsAtAsc = 'startsAt_ASC',
  StartsAtDesc = 'startsAt_DESC',
  EndsAtAsc = 'endsAt_ASC',
  EndsAtDesc = 'endsAt_DESC',
  AwardsAtAsc = 'awardsAt_ASC',
  AwardsAtDesc = 'awardsAt_DESC',
  CalendarReleaseDateAsc = 'calendarReleaseDate_ASC',
  CalendarReleaseDateDesc = 'calendarReleaseDate_DESC',
  ThemeAsc = 'theme_ASC',
  ThemeDesc = 'theme_DESC',
  ParticipantRoleIdAsc = 'participantRoleId_ASC',
  ParticipantRoleIdDesc = 'participantRoleId_DESC',
  StatEventCountAsc = 'statEventCount_ASC',
  StatEventCountDesc = 'statEventCount_DESC',
  StatStudentCountAsc = 'statStudentCount_ASC',
  StatStudentCountDesc = 'statStudentCount_DESC',
  StatLowInterestCountAsc = 'statLowInterestCount_ASC',
  StatLowInterestCountDesc = 'statLowInterestCount_DESC',
  StatLowInterestContinuedCountAsc = 'statLowInterestContinuedCount_ASC',
  StatLowInterestContinuedCountDesc = 'statLowInterestContinuedCount_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}







export type CmsFaqFilter = {
  program?: Maybe<CmscfProgramNestedFilter>;
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  tags_exists?: Maybe<Scalars['Boolean']>;
  tags_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  tags_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  tags_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  program_exists?: Maybe<Scalars['Boolean']>;
  featured_exists?: Maybe<Scalars['Boolean']>;
  featured?: Maybe<Scalars['Boolean']>;
  featured_not?: Maybe<Scalars['Boolean']>;
  audience_exists?: Maybe<Scalars['Boolean']>;
  audience_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  audience_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  audience_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  answer_exists?: Maybe<Scalars['Boolean']>;
  answer_contains?: Maybe<Scalars['String']>;
  answer_not_contains?: Maybe<Scalars['String']>;
  relatedAnswersCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsFaqFilter>>>;
  AND?: Maybe<Array<Maybe<CmsFaqFilter>>>;
};


export enum CmsFaqOrder {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}








export type CmsFormFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  slug_exists?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['String']>;
  slug_not?: Maybe<Scalars['String']>;
  slug_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug_contains?: Maybe<Scalars['String']>;
  slug_not_contains?: Maybe<Scalars['String']>;
  image_exists?: Maybe<Scalars['Boolean']>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  details_exists?: Maybe<Scalars['Boolean']>;
  details_contains?: Maybe<Scalars['String']>;
  details_not_contains?: Maybe<Scalars['String']>;
  sidebar_exists?: Maybe<Scalars['Boolean']>;
  sidebar_contains?: Maybe<Scalars['String']>;
  sidebar_not_contains?: Maybe<Scalars['String']>;
  cognitoForm_exists?: Maybe<Scalars['Boolean']>;
  cognitoForm?: Maybe<Scalars['Int']>;
  cognitoForm_not?: Maybe<Scalars['Int']>;
  cognitoForm_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cognitoForm_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cognitoForm_gt?: Maybe<Scalars['Int']>;
  cognitoForm_gte?: Maybe<Scalars['Int']>;
  cognitoForm_lt?: Maybe<Scalars['Int']>;
  cognitoForm_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<Maybe<CmsFormFilter>>>;
  AND?: Maybe<Array<Maybe<CmsFormFilter>>>;
};


export enum CmsFormOrder {
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  CognitoFormAsc = 'cognitoForm_ASC',
  CognitoFormDesc = 'cognitoForm_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}







export type CmsGlobalSponsorFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  logo_exists?: Maybe<Scalars['Boolean']>;
  link_exists?: Maybe<Scalars['Boolean']>;
  link?: Maybe<Scalars['String']>;
  link_not?: Maybe<Scalars['String']>;
  link_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_contains?: Maybe<Scalars['String']>;
  link_not_contains?: Maybe<Scalars['String']>;
  twitterUsername_exists?: Maybe<Scalars['Boolean']>;
  twitterUsername?: Maybe<Scalars['String']>;
  twitterUsername_not?: Maybe<Scalars['String']>;
  twitterUsername_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  twitterUsername_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  twitterUsername_contains?: Maybe<Scalars['String']>;
  twitterUsername_not_contains?: Maybe<Scalars['String']>;
  instagramUsername_exists?: Maybe<Scalars['Boolean']>;
  instagramUsername?: Maybe<Scalars['String']>;
  instagramUsername_not?: Maybe<Scalars['String']>;
  instagramUsername_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  instagramUsername_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  instagramUsername_contains?: Maybe<Scalars['String']>;
  instagramUsername_not_contains?: Maybe<Scalars['String']>;
  shortDescription_exists?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  perks_exists?: Maybe<Scalars['Boolean']>;
  perks?: Maybe<Scalars['String']>;
  perks_not?: Maybe<Scalars['String']>;
  perks_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  perks_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  perks_contains?: Maybe<Scalars['String']>;
  perks_not_contains?: Maybe<Scalars['String']>;
  audio_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsGlobalSponsorFilter>>>;
  AND?: Maybe<Array<Maybe<CmsGlobalSponsorFilter>>>;
};


export enum CmsGlobalSponsorOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  TwitterUsernameAsc = 'twitterUsername_ASC',
  TwitterUsernameDesc = 'twitterUsername_DESC',
  InstagramUsernameAsc = 'instagramUsername_ASC',
  InstagramUsernameDesc = 'instagramUsername_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}








export type CmsHiringCompanyFilter = {
  relatedSponsor?: Maybe<CmscfGlobalSponsorNestedFilter>;
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  logo_exists?: Maybe<Scalars['Boolean']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  featured_exists?: Maybe<Scalars['Boolean']>;
  featured?: Maybe<Scalars['Boolean']>;
  featured_not?: Maybe<Scalars['Boolean']>;
  relatedSponsor_exists?: Maybe<Scalars['Boolean']>;
  alumniReferrals_exists?: Maybe<Scalars['Boolean']>;
  alumniReferrals_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  alumniReferrals_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  alumniReferrals_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  OR?: Maybe<Array<Maybe<CmsHiringCompanyFilter>>>;
  AND?: Maybe<Array<Maybe<CmsHiringCompanyFilter>>>;
};


export enum CmsHiringCompanyOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}







export type CmsHiringPostFilter = {
  company?: Maybe<CmscfHiringCompanyNestedFilter>;
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  company_exists?: Maybe<Scalars['Boolean']>;
  regionsCollection_exists?: Maybe<Scalars['Boolean']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  paid_exists?: Maybe<Scalars['Boolean']>;
  paid?: Maybe<Scalars['Boolean']>;
  paid_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsHiringPostFilter>>>;
  AND?: Maybe<Array<Maybe<CmsHiringPostFilter>>>;
};


export enum CmsHiringPostOrder {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  PaidAsc = 'paid_ASC',
  PaidDesc = 'paid_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}


export enum CmsImageFormat {
  /** JPG image format. */
  Jpg = 'JPG',
  /**
   * Progressive JPG format stores multiple passes of an image in progressively higher detail.
   *         When a progressive image is loading, the viewer will first see a lower quality pixelated version which
   *         will gradually improve in detail, until the image is fully downloaded. This is to display an image as
   *         early as possible to make the layout look as designed.
   */
  JpgProgressive = 'JPG_PROGRESSIVE',
  /** PNG image format */
  Png = 'PNG',
  /**
   * 8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
   *         The 8-bit PNG format is mostly used for simple images, such as icons or logos.
   */
  Png8 = 'PNG8',
  /** WebP image format. */
  Webp = 'WEBP'
}

export enum CmsImageResizeFocus {
  /** Focus the resizing on the center. */
  Center = 'CENTER',
  /** Focus the resizing on the top. */
  Top = 'TOP',
  /** Focus the resizing on the top right. */
  TopRight = 'TOP_RIGHT',
  /** Focus the resizing on the right. */
  Right = 'RIGHT',
  /** Focus the resizing on the bottom right. */
  BottomRight = 'BOTTOM_RIGHT',
  /** Focus the resizing on the bottom. */
  Bottom = 'BOTTOM',
  /** Focus the resizing on the bottom left. */
  BottomLeft = 'BOTTOM_LEFT',
  /** Focus the resizing on the left. */
  Left = 'LEFT',
  /** Focus the resizing on the top left. */
  TopLeft = 'TOP_LEFT',
  /** Focus the resizing on the largest face. */
  Face = 'FACE',
  /** Focus the resizing on the area containing all the faces. */
  Faces = 'FACES'
}

export enum CmsImageResizeStrategy {
  /** Resizes the image to fit into the specified dimensions. */
  Fit = 'FIT',
  /**
   * Resizes the image to the specified dimensions, padding the image if needed.
   *         Uses desired background color as padding color.
   */
  Pad = 'PAD',
  /** Resizes the image to the specified dimensions, cropping the image if needed. */
  Fill = 'FILL',
  /** Resizes the image to the specified dimensions, changing the original aspect ratio if needed. */
  Scale = 'SCALE',
  /** Crops a part of the original image to fit into the specified dimensions. */
  Crop = 'CROP',
  /** Creates a thumbnail from the image. */
  Thumb = 'THUMB'
}

export type CmsImageTransformOptions = {
  /** Desired width in pixels. Defaults to the original image width. */
  width?: Maybe<Scalars['CmsDimension']>;
  /** Desired height in pixels. Defaults to the original image height. */
  height?: Maybe<Scalars['CmsDimension']>;
  /**
   * Desired quality of the image in percents.
   *         Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
   */
  quality?: Maybe<Scalars['CmsQuality']>;
  /**
   * Desired corner radius in pixels.
   *         Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
   *         Defaults to `0`. Uses desired background color as padding color,
   *         unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
   */
  cornerRadius?: Maybe<Scalars['Int']>;
  /** Desired resize strategy. Defaults to `FIT`. */
  resizeStrategy?: Maybe<CmsImageResizeStrategy>;
  /** Desired resize focus area. Defaults to `CENTER`. */
  resizeFocus?: Maybe<CmsImageResizeFocus>;
  /**
   * Desired background color, used with corner radius or `PAD` resize strategy.
   *         Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
   */
  backgroundColor?: Maybe<Scalars['CmsHexColor']>;
  /** Desired image format. Defaults to the original image format. */
  format?: Maybe<CmsImageFormat>;
};




export type CmsLegalDocumentFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  date_exists?: Maybe<Scalars['Boolean']>;
  date?: Maybe<Scalars['CmsDateTime']>;
  date_not?: Maybe<Scalars['CmsDateTime']>;
  date_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  date_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  date_gt?: Maybe<Scalars['CmsDateTime']>;
  date_gte?: Maybe<Scalars['CmsDateTime']>;
  date_lt?: Maybe<Scalars['CmsDateTime']>;
  date_lte?: Maybe<Scalars['CmsDateTime']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  file_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsLegalDocumentFilter>>>;
  AND?: Maybe<Array<Maybe<CmsLegalDocumentFilter>>>;
};


export enum CmsLegalDocumentOrder {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}




export type CmsNewsCoverageFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  date_exists?: Maybe<Scalars['Boolean']>;
  date?: Maybe<Scalars['CmsDateTime']>;
  date_not?: Maybe<Scalars['CmsDateTime']>;
  date_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  date_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  date_gt?: Maybe<Scalars['CmsDateTime']>;
  date_gte?: Maybe<Scalars['CmsDateTime']>;
  date_lt?: Maybe<Scalars['CmsDateTime']>;
  date_lte?: Maybe<Scalars['CmsDateTime']>;
  featured_exists?: Maybe<Scalars['Boolean']>;
  featured?: Maybe<Scalars['Boolean']>;
  featured_not?: Maybe<Scalars['Boolean']>;
  publicationName_exists?: Maybe<Scalars['Boolean']>;
  publicationName?: Maybe<Scalars['String']>;
  publicationName_not?: Maybe<Scalars['String']>;
  publicationName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  publicationName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  publicationName_contains?: Maybe<Scalars['String']>;
  publicationName_not_contains?: Maybe<Scalars['String']>;
  publicationLogo_exists?: Maybe<Scalars['Boolean']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<Maybe<CmsNewsCoverageFilter>>>;
  AND?: Maybe<Array<Maybe<CmsNewsCoverageFilter>>>;
};


export enum CmsNewsCoverageOrder {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  PublicationNameAsc = 'publicationName_ASC',
  PublicationNameDesc = 'publicationName_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type CmsPressPhotoFilter = {
  event?: Maybe<CmscfEventNestedFilter>;
  region?: Maybe<CmscfRegionNestedFilter>;
  subProgram?: Maybe<CmscfProgramNestedFilter>;
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  photo_exists?: Maybe<Scalars['Boolean']>;
  event_exists?: Maybe<Scalars['Boolean']>;
  region_exists?: Maybe<Scalars['Boolean']>;
  tags_exists?: Maybe<Scalars['Boolean']>;
  tags_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  tags_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  tags_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  subProgram_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsPressPhotoFilter>>>;
  AND?: Maybe<Array<Maybe<CmsPressPhotoFilter>>>;
};


export enum CmsPressPhotoOrder {
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}











export type CmsProgramFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  webname_exists?: Maybe<Scalars['Boolean']>;
  webname?: Maybe<Scalars['String']>;
  webname_not?: Maybe<Scalars['String']>;
  webname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_contains?: Maybe<Scalars['String']>;
  webname_not_contains?: Maybe<Scalars['String']>;
  virtual_exists?: Maybe<Scalars['Boolean']>;
  virtual?: Maybe<Scalars['Boolean']>;
  virtual_not?: Maybe<Scalars['Boolean']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  logo_exists?: Maybe<Scalars['Boolean']>;
  logoWhite_exists?: Maybe<Scalars['Boolean']>;
  presentingSponsorsCollection_exists?: Maybe<Scalars['Boolean']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  shortDescription_exists?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  eligibility_exists?: Maybe<Scalars['Boolean']>;
  eligibility_contains?: Maybe<Scalars['String']>;
  eligibility_not_contains?: Maybe<Scalars['String']>;
  educationDetails_exists?: Maybe<Scalars['Boolean']>;
  educationDetails_contains?: Maybe<Scalars['String']>;
  educationDetails_not_contains?: Maybe<Scalars['String']>;
  volunteerDetails_exists?: Maybe<Scalars['Boolean']>;
  volunteerDetails_contains?: Maybe<Scalars['String']>;
  volunteerDetails_not_contains?: Maybe<Scalars['String']>;
  volunteerUrl_exists?: Maybe<Scalars['Boolean']>;
  volunteerUrl?: Maybe<Scalars['String']>;
  volunteerUrl_not?: Maybe<Scalars['String']>;
  volunteerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerUrl_contains?: Maybe<Scalars['String']>;
  volunteerUrl_not_contains?: Maybe<Scalars['String']>;
  volunteerPositions_exists?: Maybe<Scalars['Boolean']>;
  volunteerPositions_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerPositions_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerPositions_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerBlurb_exists?: Maybe<Scalars['Boolean']>;
  volunteerBlurb_contains?: Maybe<Scalars['String']>;
  volunteerBlurb_not_contains?: Maybe<Scalars['String']>;
  volunteerRecruitingResourcesCollection_exists?: Maybe<Scalars['Boolean']>;
  postersCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsProgramFilter>>>;
  AND?: Maybe<Array<Maybe<CmsProgramFilter>>>;
};


export enum CmsProgramOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  WebnameAsc = 'webname_ASC',
  WebnameDesc = 'webname_DESC',
  VirtualAsc = 'virtual_ASC',
  VirtualDesc = 'virtual_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  VolunteerUrlAsc = 'volunteerUrl_ASC',
  VolunteerUrlDesc = 'volunteerUrl_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}















export type CmsRegionFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  accountingName_exists?: Maybe<Scalars['Boolean']>;
  accountingName?: Maybe<Scalars['String']>;
  accountingName_not?: Maybe<Scalars['String']>;
  accountingName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountingName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountingName_contains?: Maybe<Scalars['String']>;
  accountingName_not_contains?: Maybe<Scalars['String']>;
  webname_exists?: Maybe<Scalars['Boolean']>;
  webname?: Maybe<Scalars['String']>;
  webname_not?: Maybe<Scalars['String']>;
  webname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_contains?: Maybe<Scalars['String']>;
  webname_not_contains?: Maybe<Scalars['String']>;
  aliases_exists?: Maybe<Scalars['Boolean']>;
  aliases_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  aliases_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  aliases_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  abbr_exists?: Maybe<Scalars['Boolean']>;
  abbr?: Maybe<Scalars['String']>;
  abbr_not?: Maybe<Scalars['String']>;
  abbr_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  abbr_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  abbr_contains?: Maybe<Scalars['String']>;
  abbr_not_contains?: Maybe<Scalars['String']>;
  location_exists?: Maybe<Scalars['Boolean']>;
  location_within_circle?: Maybe<Scalars['CmsCircle']>;
  location_within_rectangle?: Maybe<Scalars['CmsRectangle']>;
  timezone_exists?: Maybe<Scalars['Boolean']>;
  timezone?: Maybe<Scalars['String']>;
  timezone_not?: Maybe<Scalars['String']>;
  timezone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timezone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timezone_contains?: Maybe<Scalars['String']>;
  timezone_not_contains?: Maybe<Scalars['String']>;
  complication_exists?: Maybe<Scalars['Boolean']>;
  primaryColor_exists?: Maybe<Scalars['Boolean']>;
  primaryColor?: Maybe<Scalars['String']>;
  primaryColor_not?: Maybe<Scalars['String']>;
  primaryColor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  primaryColor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  primaryColor_contains?: Maybe<Scalars['String']>;
  primaryColor_not_contains?: Maybe<Scalars['String']>;
  motto_exists?: Maybe<Scalars['Boolean']>;
  motto?: Maybe<Scalars['String']>;
  motto_not?: Maybe<Scalars['String']>;
  motto_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  motto_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  motto_contains?: Maybe<Scalars['String']>;
  motto_not_contains?: Maybe<Scalars['String']>;
  skylinePhoto_exists?: Maybe<Scalars['Boolean']>;
  regionPhotosCollection_exists?: Maybe<Scalars['Boolean']>;
  stickerLarge_exists?: Maybe<Scalars['Boolean']>;
  stickerSmall_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsRegionFilter>>>;
  AND?: Maybe<Array<Maybe<CmsRegionFilter>>>;
};


export enum CmsRegionOrder {
  AccountingNameAsc = 'accountingName_ASC',
  AccountingNameDesc = 'accountingName_DESC',
  WebnameAsc = 'webname_ASC',
  WebnameDesc = 'webname_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  AbbrAsc = 'abbr_ASC',
  AbbrDesc = 'abbr_DESC',
  TimezoneAsc = 'timezone_ASC',
  TimezoneDesc = 'timezone_DESC',
  PrimaryColorAsc = 'primaryColor_ASC',
  PrimaryColorDesc = 'primaryColor_DESC',
  MottoAsc = 'motto_ASC',
  MottoDesc = 'motto_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type CmsSiteFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  link_exists?: Maybe<Scalars['Boolean']>;
  link?: Maybe<Scalars['String']>;
  link_not?: Maybe<Scalars['String']>;
  link_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_contains?: Maybe<Scalars['String']>;
  link_not_contains?: Maybe<Scalars['String']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  display_exists?: Maybe<Scalars['Boolean']>;
  display_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  display_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  display_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  OR?: Maybe<Array<Maybe<CmsSiteFilter>>>;
  AND?: Maybe<Array<Maybe<CmsSiteFilter>>>;
};


export enum CmsSiteOrder {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type CmsStockMusicFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  music_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsStockMusicFilter>>>;
  AND?: Maybe<Array<Maybe<CmsStockMusicFilter>>>;
};


export enum CmsStockMusicOrder {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}


export type CmsSysFilter = {
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  publishedAt_exists?: Maybe<Scalars['Boolean']>;
  publishedAt?: Maybe<Scalars['CmsDateTime']>;
  publishedAt_not?: Maybe<Scalars['CmsDateTime']>;
  publishedAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  publishedAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  publishedAt_gt?: Maybe<Scalars['CmsDateTime']>;
  publishedAt_gte?: Maybe<Scalars['CmsDateTime']>;
  publishedAt_lt?: Maybe<Scalars['CmsDateTime']>;
  publishedAt_lte?: Maybe<Scalars['CmsDateTime']>;
  firstPublishedAt_exists?: Maybe<Scalars['Boolean']>;
  firstPublishedAt?: Maybe<Scalars['CmsDateTime']>;
  firstPublishedAt_not?: Maybe<Scalars['CmsDateTime']>;
  firstPublishedAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  firstPublishedAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  firstPublishedAt_gt?: Maybe<Scalars['CmsDateTime']>;
  firstPublishedAt_gte?: Maybe<Scalars['CmsDateTime']>;
  firstPublishedAt_lt?: Maybe<Scalars['CmsDateTime']>;
  firstPublishedAt_lte?: Maybe<Scalars['CmsDateTime']>;
  publishedVersion_exists?: Maybe<Scalars['Boolean']>;
  publishedVersion?: Maybe<Scalars['Float']>;
  publishedVersion_not?: Maybe<Scalars['Float']>;
  publishedVersion_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  publishedVersion_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  publishedVersion_gt?: Maybe<Scalars['Float']>;
  publishedVersion_gte?: Maybe<Scalars['Float']>;
  publishedVersion_lt?: Maybe<Scalars['Float']>;
  publishedVersion_lte?: Maybe<Scalars['Float']>;
};



export type CmsTestimonialFilter = {
  region?: Maybe<CmscfRegionNestedFilter>;
  program?: Maybe<CmscfProgramNestedFilter>;
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  quote_exists?: Maybe<Scalars['Boolean']>;
  quote?: Maybe<Scalars['String']>;
  quote_not?: Maybe<Scalars['String']>;
  quote_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  quote_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  quote_contains?: Maybe<Scalars['String']>;
  quote_not_contains?: Maybe<Scalars['String']>;
  featured_exists?: Maybe<Scalars['Boolean']>;
  featured?: Maybe<Scalars['Boolean']>;
  featured_not?: Maybe<Scalars['Boolean']>;
  image_exists?: Maybe<Scalars['Boolean']>;
  video_exists?: Maybe<Scalars['Boolean']>;
  groupName_exists?: Maybe<Scalars['Boolean']>;
  groupName?: Maybe<Scalars['String']>;
  groupName_not?: Maybe<Scalars['String']>;
  groupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  groupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  groupName_contains?: Maybe<Scalars['String']>;
  groupName_not_contains?: Maybe<Scalars['String']>;
  firstName_exists?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  lastName_exists?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  company_exists?: Maybe<Scalars['Boolean']>;
  company?: Maybe<Scalars['String']>;
  company_not?: Maybe<Scalars['String']>;
  company_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  company_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  company_contains?: Maybe<Scalars['String']>;
  company_not_contains?: Maybe<Scalars['String']>;
  experience_exists?: Maybe<Scalars['Boolean']>;
  experience?: Maybe<Scalars['String']>;
  experience_not?: Maybe<Scalars['String']>;
  experience_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  experience_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  experience_contains?: Maybe<Scalars['String']>;
  experience_not_contains?: Maybe<Scalars['String']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  region_exists?: Maybe<Scalars['Boolean']>;
  program_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmsTestimonialFilter>>>;
  AND?: Maybe<Array<Maybe<CmsTestimonialFilter>>>;
};


export enum CmsTestimonialOrder {
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  GroupNameAsc = 'groupName_ASC',
  GroupNameDesc = 'groupName_DESC',
  FirstNameAsc = 'firstName_ASC',
  FirstNameDesc = 'firstName_DESC',
  LastNameAsc = 'lastName_ASC',
  LastNameDesc = 'lastName_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  CompanyAsc = 'company_ASC',
  CompanyDesc = 'company_DESC',
  ExperienceAsc = 'experience_ASC',
  ExperienceDesc = 'experience_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}

export type CmscfEventNestedFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  program_exists?: Maybe<Scalars['Boolean']>;
  registrationsOpenAt_exists?: Maybe<Scalars['Boolean']>;
  registrationsOpenAt?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_not?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt_gt?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_gte?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_lt?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_lte?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_exists?: Maybe<Scalars['Boolean']>;
  registrationsCloseAt?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_not?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsCloseAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  registrationsCloseAt_gt?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_gte?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_lt?: Maybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_lte?: Maybe<Scalars['CmsDateTime']>;
  startsAt_exists?: Maybe<Scalars['Boolean']>;
  startsAt?: Maybe<Scalars['CmsDateTime']>;
  startsAt_not?: Maybe<Scalars['CmsDateTime']>;
  startsAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  startsAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  startsAt_gt?: Maybe<Scalars['CmsDateTime']>;
  startsAt_gte?: Maybe<Scalars['CmsDateTime']>;
  startsAt_lt?: Maybe<Scalars['CmsDateTime']>;
  startsAt_lte?: Maybe<Scalars['CmsDateTime']>;
  endsAt_exists?: Maybe<Scalars['Boolean']>;
  endsAt?: Maybe<Scalars['CmsDateTime']>;
  endsAt_not?: Maybe<Scalars['CmsDateTime']>;
  endsAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  endsAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  endsAt_gt?: Maybe<Scalars['CmsDateTime']>;
  endsAt_gte?: Maybe<Scalars['CmsDateTime']>;
  endsAt_lt?: Maybe<Scalars['CmsDateTime']>;
  endsAt_lte?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_exists?: Maybe<Scalars['Boolean']>;
  awardsAt?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_not?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  awardsAt_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  awardsAt_gt?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_gte?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_lt?: Maybe<Scalars['CmsDateTime']>;
  awardsAt_lte?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_exists?: Maybe<Scalars['Boolean']>;
  calendarReleaseDate?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_not?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate_not_in?: Maybe<Array<Maybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate_gt?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_gte?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_lt?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_lte?: Maybe<Scalars['CmsDateTime']>;
  notice_exists?: Maybe<Scalars['Boolean']>;
  notice_contains?: Maybe<Scalars['String']>;
  notice_not_contains?: Maybe<Scalars['String']>;
  theme_exists?: Maybe<Scalars['Boolean']>;
  theme?: Maybe<Scalars['String']>;
  theme_not?: Maybe<Scalars['String']>;
  theme_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  theme_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  theme_contains?: Maybe<Scalars['String']>;
  theme_not_contains?: Maybe<Scalars['String']>;
  themeBackgroundsCollection_exists?: Maybe<Scalars['Boolean']>;
  themeLogoBackgroundsCollection_exists?: Maybe<Scalars['Boolean']>;
  kickoffVideo_exists?: Maybe<Scalars['Boolean']>;
  kickoffVideoCaptions_exists?: Maybe<Scalars['Boolean']>;
  participantRoleId_exists?: Maybe<Scalars['Boolean']>;
  participantRoleId?: Maybe<Scalars['String']>;
  participantRoleId_not?: Maybe<Scalars['String']>;
  participantRoleId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  participantRoleId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  participantRoleId_contains?: Maybe<Scalars['String']>;
  participantRoleId_not_contains?: Maybe<Scalars['String']>;
  statEventCount_exists?: Maybe<Scalars['Boolean']>;
  statEventCount?: Maybe<Scalars['Int']>;
  statEventCount_not?: Maybe<Scalars['Int']>;
  statEventCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statEventCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statEventCount_gt?: Maybe<Scalars['Int']>;
  statEventCount_gte?: Maybe<Scalars['Int']>;
  statEventCount_lt?: Maybe<Scalars['Int']>;
  statEventCount_lte?: Maybe<Scalars['Int']>;
  statStudentCount_exists?: Maybe<Scalars['Boolean']>;
  statStudentCount?: Maybe<Scalars['Int']>;
  statStudentCount_not?: Maybe<Scalars['Int']>;
  statStudentCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statStudentCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statStudentCount_gt?: Maybe<Scalars['Int']>;
  statStudentCount_gte?: Maybe<Scalars['Int']>;
  statStudentCount_lt?: Maybe<Scalars['Int']>;
  statStudentCount_lte?: Maybe<Scalars['Int']>;
  statLowInterestCount_exists?: Maybe<Scalars['Boolean']>;
  statLowInterestCount?: Maybe<Scalars['Int']>;
  statLowInterestCount_not?: Maybe<Scalars['Int']>;
  statLowInterestCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestCount_gt?: Maybe<Scalars['Int']>;
  statLowInterestCount_gte?: Maybe<Scalars['Int']>;
  statLowInterestCount_lt?: Maybe<Scalars['Int']>;
  statLowInterestCount_lte?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_exists?: Maybe<Scalars['Boolean']>;
  statLowInterestContinuedCount?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_not?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestContinuedCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statLowInterestContinuedCount_gt?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_gte?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_lt?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount_lte?: Maybe<Scalars['Int']>;
  postersCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmscfEventNestedFilter>>>;
  AND?: Maybe<Array<Maybe<CmscfEventNestedFilter>>>;
};

export type CmscfGlobalSponsorNestedFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  logo_exists?: Maybe<Scalars['Boolean']>;
  link_exists?: Maybe<Scalars['Boolean']>;
  link?: Maybe<Scalars['String']>;
  link_not?: Maybe<Scalars['String']>;
  link_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  link_contains?: Maybe<Scalars['String']>;
  link_not_contains?: Maybe<Scalars['String']>;
  twitterUsername_exists?: Maybe<Scalars['Boolean']>;
  twitterUsername?: Maybe<Scalars['String']>;
  twitterUsername_not?: Maybe<Scalars['String']>;
  twitterUsername_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  twitterUsername_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  twitterUsername_contains?: Maybe<Scalars['String']>;
  twitterUsername_not_contains?: Maybe<Scalars['String']>;
  instagramUsername_exists?: Maybe<Scalars['Boolean']>;
  instagramUsername?: Maybe<Scalars['String']>;
  instagramUsername_not?: Maybe<Scalars['String']>;
  instagramUsername_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  instagramUsername_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  instagramUsername_contains?: Maybe<Scalars['String']>;
  instagramUsername_not_contains?: Maybe<Scalars['String']>;
  shortDescription_exists?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  perks_exists?: Maybe<Scalars['Boolean']>;
  perks?: Maybe<Scalars['String']>;
  perks_not?: Maybe<Scalars['String']>;
  perks_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  perks_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  perks_contains?: Maybe<Scalars['String']>;
  perks_not_contains?: Maybe<Scalars['String']>;
  audio_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmscfGlobalSponsorNestedFilter>>>;
  AND?: Maybe<Array<Maybe<CmscfGlobalSponsorNestedFilter>>>;
};

export type CmscfHiringCompanyNestedFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  logo_exists?: Maybe<Scalars['Boolean']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  featured_exists?: Maybe<Scalars['Boolean']>;
  featured?: Maybe<Scalars['Boolean']>;
  featured_not?: Maybe<Scalars['Boolean']>;
  relatedSponsor_exists?: Maybe<Scalars['Boolean']>;
  alumniReferrals_exists?: Maybe<Scalars['Boolean']>;
  alumniReferrals_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  alumniReferrals_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  alumniReferrals_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  OR?: Maybe<Array<Maybe<CmscfHiringCompanyNestedFilter>>>;
  AND?: Maybe<Array<Maybe<CmscfHiringCompanyNestedFilter>>>;
};

export type CmscfProgramNestedFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  webname_exists?: Maybe<Scalars['Boolean']>;
  webname?: Maybe<Scalars['String']>;
  webname_not?: Maybe<Scalars['String']>;
  webname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_contains?: Maybe<Scalars['String']>;
  webname_not_contains?: Maybe<Scalars['String']>;
  virtual_exists?: Maybe<Scalars['Boolean']>;
  virtual?: Maybe<Scalars['Boolean']>;
  virtual_not?: Maybe<Scalars['Boolean']>;
  type_exists?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  logo_exists?: Maybe<Scalars['Boolean']>;
  logoWhite_exists?: Maybe<Scalars['Boolean']>;
  presentingSponsorsCollection_exists?: Maybe<Scalars['Boolean']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  shortDescription_exists?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  eligibility_exists?: Maybe<Scalars['Boolean']>;
  eligibility_contains?: Maybe<Scalars['String']>;
  eligibility_not_contains?: Maybe<Scalars['String']>;
  educationDetails_exists?: Maybe<Scalars['Boolean']>;
  educationDetails_contains?: Maybe<Scalars['String']>;
  educationDetails_not_contains?: Maybe<Scalars['String']>;
  volunteerDetails_exists?: Maybe<Scalars['Boolean']>;
  volunteerDetails_contains?: Maybe<Scalars['String']>;
  volunteerDetails_not_contains?: Maybe<Scalars['String']>;
  volunteerUrl_exists?: Maybe<Scalars['Boolean']>;
  volunteerUrl?: Maybe<Scalars['String']>;
  volunteerUrl_not?: Maybe<Scalars['String']>;
  volunteerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerUrl_contains?: Maybe<Scalars['String']>;
  volunteerUrl_not_contains?: Maybe<Scalars['String']>;
  volunteerPositions_exists?: Maybe<Scalars['Boolean']>;
  volunteerPositions_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerPositions_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerPositions_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerBlurb_exists?: Maybe<Scalars['Boolean']>;
  volunteerBlurb_contains?: Maybe<Scalars['String']>;
  volunteerBlurb_not_contains?: Maybe<Scalars['String']>;
  volunteerRecruitingResourcesCollection_exists?: Maybe<Scalars['Boolean']>;
  postersCollection_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmscfProgramNestedFilter>>>;
  AND?: Maybe<Array<Maybe<CmscfProgramNestedFilter>>>;
};

export type CmscfRegionNestedFilter = {
  sys?: Maybe<CmsSysFilter>;
  contentfulMetadata?: Maybe<CmsContentfulMetadataFilter>;
  accountingName_exists?: Maybe<Scalars['Boolean']>;
  accountingName?: Maybe<Scalars['String']>;
  accountingName_not?: Maybe<Scalars['String']>;
  accountingName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountingName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountingName_contains?: Maybe<Scalars['String']>;
  accountingName_not_contains?: Maybe<Scalars['String']>;
  webname_exists?: Maybe<Scalars['Boolean']>;
  webname?: Maybe<Scalars['String']>;
  webname_not?: Maybe<Scalars['String']>;
  webname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webname_contains?: Maybe<Scalars['String']>;
  webname_not_contains?: Maybe<Scalars['String']>;
  aliases_exists?: Maybe<Scalars['Boolean']>;
  aliases_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  aliases_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  aliases_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  abbr_exists?: Maybe<Scalars['Boolean']>;
  abbr?: Maybe<Scalars['String']>;
  abbr_not?: Maybe<Scalars['String']>;
  abbr_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  abbr_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  abbr_contains?: Maybe<Scalars['String']>;
  abbr_not_contains?: Maybe<Scalars['String']>;
  location_exists?: Maybe<Scalars['Boolean']>;
  location_within_circle?: Maybe<Scalars['CmsCircle']>;
  location_within_rectangle?: Maybe<Scalars['CmsRectangle']>;
  timezone_exists?: Maybe<Scalars['Boolean']>;
  timezone?: Maybe<Scalars['String']>;
  timezone_not?: Maybe<Scalars['String']>;
  timezone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timezone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timezone_contains?: Maybe<Scalars['String']>;
  timezone_not_contains?: Maybe<Scalars['String']>;
  complication_exists?: Maybe<Scalars['Boolean']>;
  primaryColor_exists?: Maybe<Scalars['Boolean']>;
  primaryColor?: Maybe<Scalars['String']>;
  primaryColor_not?: Maybe<Scalars['String']>;
  primaryColor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  primaryColor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  primaryColor_contains?: Maybe<Scalars['String']>;
  primaryColor_not_contains?: Maybe<Scalars['String']>;
  motto_exists?: Maybe<Scalars['Boolean']>;
  motto?: Maybe<Scalars['String']>;
  motto_not?: Maybe<Scalars['String']>;
  motto_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  motto_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  motto_contains?: Maybe<Scalars['String']>;
  motto_not_contains?: Maybe<Scalars['String']>;
  skylinePhoto_exists?: Maybe<Scalars['Boolean']>;
  regionPhotosCollection_exists?: Maybe<Scalars['Boolean']>;
  stickerLarge_exists?: Maybe<Scalars['Boolean']>;
  stickerSmall_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<CmscfRegionNestedFilter>>>;
  AND?: Maybe<Array<Maybe<CmscfRegionNestedFilter>>>;
};


export type LabsIdOrUsernameInput = {
  id?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};





export type LabsMentorApplyInput = {
  givenName: Scalars['String'];
  surname: Scalars['String'];
  email: Scalars['String'];
  profile?: Maybe<Scalars['LabsJSONObject']>;
  maxWeeks?: Maybe<Scalars['Int']>;
  projects: Array<LabsProjectCreateInput>;
};

export type LabsMentorCreateInput = {
  givenName: Scalars['String'];
  surname: Scalars['String'];
  email: Scalars['String'];
  username?: Maybe<Scalars['String']>;
  status?: Maybe<LabsMentorStatus>;
  maxWeeks?: Maybe<Scalars['Int']>;
  profile?: Maybe<Scalars['LabsJSONObject']>;
};

export type LabsMentorEditInput = {
  givenName?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  status?: Maybe<LabsMentorStatus>;
  maxWeeks?: Maybe<Scalars['Int']>;
  managerUsername?: Maybe<Scalars['String']>;
  profile?: Maybe<Scalars['LabsJSONObject']>;
};

export type LabsMentorFilterInput = {
  assignedToManager?: Maybe<Scalars['String']>;
  inStatus?: Maybe<LabsMentorStatus>;
  withProjects?: Maybe<Scalars['Boolean']>;
  weeksGte?: Maybe<Scalars['Float']>;
};

export enum LabsMentorStatus {
  Applied = 'APPLIED',
  Scheduled = 'SCHEDULED',
  Accepted = 'ACCEPTED',
  Rejected = 'REJECTED',
  Canceled = 'CANCELED'
}




export type LabsProjectCreateInput = {
  description?: Maybe<Scalars['String']>;
  deliverables?: Maybe<Scalars['String']>;
  track: LabsTrack;
  maxStudents?: Maybe<Scalars['Int']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type LabsProjectEditInput = {
  description?: Maybe<Scalars['String']>;
  deliverables?: Maybe<Scalars['String']>;
  track?: Maybe<LabsTrack>;
  status?: Maybe<LabsProjectStatus>;
  maxStudents?: Maybe<Scalars['Int']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export enum LabsProjectStatus {
  Draft = 'DRAFT',
  Proposed = 'PROPOSED',
  Accepted = 'ACCEPTED',
  Matched = 'MATCHED'
}


export enum LabsRejectionReason {
  ExperienceHigh = 'EXPERIENCE_HIGH',
  ExperienceLow = 'EXPERIENCE_LOW',
  Other = 'OTHER'
}



export type LabsStudentApplyInput = {
  givenName: Scalars['String'];
  surname: Scalars['String'];
  email: Scalars['String'];
  profile?: Maybe<Scalars['LabsJSONObject']>;
  track: LabsTrack;
  minHours: Scalars['Int'];
  partnerCode?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type LabsStudentCreateInput = {
  givenName: Scalars['String'];
  surname: Scalars['String'];
  email: Scalars['String'];
  username: Scalars['String'];
  profile?: Maybe<Scalars['LabsJSONObject']>;
  status?: Maybe<LabsStudentStatus>;
  track: LabsTrack;
  minHours: Scalars['Int'];
  weeks?: Maybe<Scalars['Int']>;
  partnerCode?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type LabsStudentEditInput = {
  givenName?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  status?: Maybe<LabsStudentStatus>;
  track?: Maybe<LabsTrack>;
  minHours?: Maybe<Scalars['Int']>;
  weeks?: Maybe<Scalars['Int']>;
  profile?: Maybe<Scalars['LabsJSONObject']>;
  partnerCode?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type LabsStudentFilterInput = {
  inStatus?: Maybe<LabsStudentStatus>;
  withProjects?: Maybe<Scalars['Boolean']>;
  partnerCode?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

export enum LabsStudentStatus {
  Applied = 'APPLIED',
  TrackInterview = 'TRACK_INTERVIEW',
  TrackChallenge = 'TRACK_CHALLENGE',
  Offered = 'OFFERED',
  Accepted = 'ACCEPTED',
  Rejected = 'REJECTED',
  Canceled = 'CANCELED'
}


export type LabsTagCreateInput = {
  id: Scalars['String'];
  mentorDisplayName: Scalars['String'];
  studentDisplayName: Scalars['String'];
  trainingLink?: Maybe<Scalars['String']>;
  type: LabsTagType;
};

export type LabsTagEditInput = {
  mentorDisplayName?: Maybe<Scalars['String']>;
  studentDisplayName?: Maybe<Scalars['String']>;
  trainingLink?: Maybe<Scalars['String']>;
  type?: Maybe<LabsTagType>;
};


export enum LabsTagType {
  Interest = 'INTEREST',
  Technology = 'TECHNOLOGY'
}

export enum LabsTrack {
  Beginner = 'BEGINNER',
  Intermediate = 'INTERMEDIATE',
  Advanced = 'ADVANCED'
}




export type LearnAssetFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  title_exists?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  url_exists?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  size_exists?: Maybe<Scalars['Boolean']>;
  size?: Maybe<Scalars['Int']>;
  size_not?: Maybe<Scalars['Int']>;
  size_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  size_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  size_gt?: Maybe<Scalars['Int']>;
  size_gte?: Maybe<Scalars['Int']>;
  size_lt?: Maybe<Scalars['Int']>;
  size_lte?: Maybe<Scalars['Int']>;
  contentType_exists?: Maybe<Scalars['Boolean']>;
  contentType?: Maybe<Scalars['String']>;
  contentType_not?: Maybe<Scalars['String']>;
  contentType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType_contains?: Maybe<Scalars['String']>;
  contentType_not_contains?: Maybe<Scalars['String']>;
  fileName_exists?: Maybe<Scalars['Boolean']>;
  fileName?: Maybe<Scalars['String']>;
  fileName_not?: Maybe<Scalars['String']>;
  fileName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fileName_contains?: Maybe<Scalars['String']>;
  fileName_not_contains?: Maybe<Scalars['String']>;
  width_exists?: Maybe<Scalars['Boolean']>;
  width?: Maybe<Scalars['Int']>;
  width_not?: Maybe<Scalars['Int']>;
  width_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  width_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  width_gt?: Maybe<Scalars['Int']>;
  width_gte?: Maybe<Scalars['Int']>;
  width_lt?: Maybe<Scalars['Int']>;
  width_lte?: Maybe<Scalars['Int']>;
  height_exists?: Maybe<Scalars['Boolean']>;
  height?: Maybe<Scalars['Int']>;
  height_not?: Maybe<Scalars['Int']>;
  height_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  height_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  height_gt?: Maybe<Scalars['Int']>;
  height_gte?: Maybe<Scalars['Int']>;
  height_lt?: Maybe<Scalars['Int']>;
  height_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<Maybe<LearnAssetFilter>>>;
  AND?: Maybe<Array<Maybe<LearnAssetFilter>>>;
};


export enum LearnAssetOrder {
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  ContentTypeAsc = 'contentType_ASC',
  ContentTypeDesc = 'contentType_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type LearnCodeBlockFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  language_exists?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['String']>;
  language_not?: Maybe<Scalars['String']>;
  language_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  language_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  language_contains?: Maybe<Scalars['String']>;
  language_not_contains?: Maybe<Scalars['String']>;
  code_exists?: Maybe<Scalars['Boolean']>;
  code?: Maybe<Scalars['String']>;
  code_not?: Maybe<Scalars['String']>;
  code_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  code_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  code_contains?: Maybe<Scalars['String']>;
  code_not_contains?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<Maybe<LearnCodeBlockFilter>>>;
  AND?: Maybe<Array<Maybe<LearnCodeBlockFilter>>>;
};


export enum LearnCodeBlockOrder {
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}


export type LearnContentfulMetadataFilter = {
  tags_exists?: Maybe<Scalars['Boolean']>;
  tags?: Maybe<LearnContentfulMetadataTagsFilter>;
};

export type LearnContentfulMetadataTagsFilter = {
  id_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
};





export type LearnDifficultyFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  shortDescription_exists?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  hexCodeColor_exists?: Maybe<Scalars['Boolean']>;
  hexCodeColor?: Maybe<Scalars['String']>;
  hexCodeColor_not?: Maybe<Scalars['String']>;
  hexCodeColor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hexCodeColor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hexCodeColor_contains?: Maybe<Scalars['String']>;
  hexCodeColor_not_contains?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<Maybe<LearnDifficultyFilter>>>;
  AND?: Maybe<Array<Maybe<LearnDifficultyFilter>>>;
};


export enum LearnDifficultyOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  HexCodeColorAsc = 'hexCodeColor_ASC',
  HexCodeColorDesc = 'hexCodeColor_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}




export type LearnEntryFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  OR?: Maybe<Array<Maybe<LearnEntryFilter>>>;
  AND?: Maybe<Array<Maybe<LearnEntryFilter>>>;
};

export enum LearnEntryOrder {
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}


export enum LearnImageFormat {
  /** JPG image format. */
  Jpg = 'JPG',
  /**
   * Progressive JPG format stores multiple passes of an image in progressively higher detail.
   *         When a progressive image is loading, the viewer will first see a lower quality pixelated version which
   *         will gradually improve in detail, until the image is fully downloaded. This is to display an image as
   *         early as possible to make the layout look as designed.
   */
  JpgProgressive = 'JPG_PROGRESSIVE',
  /** PNG image format */
  Png = 'PNG',
  /**
   * 8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
   *         The 8-bit PNG format is mostly used for simple images, such as icons or logos.
   */
  Png8 = 'PNG8',
  /** WebP image format. */
  Webp = 'WEBP'
}

export enum LearnImageResizeFocus {
  /** Focus the resizing on the center. */
  Center = 'CENTER',
  /** Focus the resizing on the top. */
  Top = 'TOP',
  /** Focus the resizing on the top right. */
  TopRight = 'TOP_RIGHT',
  /** Focus the resizing on the right. */
  Right = 'RIGHT',
  /** Focus the resizing on the bottom right. */
  BottomRight = 'BOTTOM_RIGHT',
  /** Focus the resizing on the bottom. */
  Bottom = 'BOTTOM',
  /** Focus the resizing on the bottom left. */
  BottomLeft = 'BOTTOM_LEFT',
  /** Focus the resizing on the left. */
  Left = 'LEFT',
  /** Focus the resizing on the top left. */
  TopLeft = 'TOP_LEFT',
  /** Focus the resizing on the largest face. */
  Face = 'FACE',
  /** Focus the resizing on the area containing all the faces. */
  Faces = 'FACES'
}

export enum LearnImageResizeStrategy {
  /** Resizes the image to fit into the specified dimensions. */
  Fit = 'FIT',
  /**
   * Resizes the image to the specified dimensions, padding the image if needed.
   *         Uses desired background color as padding color.
   */
  Pad = 'PAD',
  /** Resizes the image to the specified dimensions, cropping the image if needed. */
  Fill = 'FILL',
  /** Resizes the image to the specified dimensions, changing the original aspect ratio if needed. */
  Scale = 'SCALE',
  /** Crops a part of the original image to fit into the specified dimensions. */
  Crop = 'CROP',
  /** Creates a thumbnail from the image. */
  Thumb = 'THUMB'
}

export type LearnImageTransformOptions = {
  /** Desired width in pixels. Defaults to the original image width. */
  width?: Maybe<Scalars['LearnDimension']>;
  /** Desired height in pixels. Defaults to the original image height. */
  height?: Maybe<Scalars['LearnDimension']>;
  /**
   * Desired quality of the image in percents.
   *         Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
   */
  quality?: Maybe<Scalars['LearnQuality']>;
  /**
   * Desired corner radius in pixels.
   *         Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
   *         Defaults to `0`. Uses desired background color as padding color,
   *         unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
   */
  cornerRadius?: Maybe<Scalars['Int']>;
  /** Desired resize strategy. Defaults to `FIT`. */
  resizeStrategy?: Maybe<LearnImageResizeStrategy>;
  /** Desired resize focus area. Defaults to `CENTER`. */
  resizeFocus?: Maybe<LearnImageResizeFocus>;
  /**
   * Desired background color, used with corner radius or `PAD` resize strategy.
   *         Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
   */
  backgroundColor?: Maybe<Scalars['LearnHexColor']>;
  /** Desired image format. Defaults to the original image format. */
  format?: Maybe<LearnImageFormat>;
};








export type LearnLessonFilter = {
  track?: Maybe<LearncfTrackNestedFilter>;
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  nameHeader_exists?: Maybe<Scalars['Boolean']>;
  nameHeader?: Maybe<Scalars['String']>;
  nameHeader_not?: Maybe<Scalars['String']>;
  nameHeader_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nameHeader_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nameHeader_contains?: Maybe<Scalars['String']>;
  nameHeader_not_contains?: Maybe<Scalars['String']>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  points_exists?: Maybe<Scalars['Boolean']>;
  points?: Maybe<Scalars['Int']>;
  points_not?: Maybe<Scalars['Int']>;
  points_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  points_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  points_gt?: Maybe<Scalars['Int']>;
  points_gte?: Maybe<Scalars['Int']>;
  points_lt?: Maybe<Scalars['Int']>;
  points_lte?: Maybe<Scalars['Int']>;
  pageNumber_exists?: Maybe<Scalars['Boolean']>;
  pageNumber?: Maybe<Scalars['Int']>;
  pageNumber_not?: Maybe<Scalars['Int']>;
  pageNumber_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  pageNumber_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  pageNumber_gt?: Maybe<Scalars['Int']>;
  pageNumber_gte?: Maybe<Scalars['Int']>;
  pageNumber_lt?: Maybe<Scalars['Int']>;
  pageNumber_lte?: Maybe<Scalars['Int']>;
  hasNextPage_exists?: Maybe<Scalars['Boolean']>;
  hasNextPage?: Maybe<Scalars['Boolean']>;
  hasNextPage_not?: Maybe<Scalars['Boolean']>;
  content_exists?: Maybe<Scalars['Boolean']>;
  content_contains?: Maybe<Scalars['String']>;
  content_not_contains?: Maybe<Scalars['String']>;
  tags_exists?: Maybe<Scalars['Boolean']>;
  tags_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  tags_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  tags_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  track_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<LearnLessonFilter>>>;
  AND?: Maybe<Array<Maybe<LearnLessonFilter>>>;
};


export enum LearnLessonOrder {
  NameHeaderAsc = 'nameHeader_ASC',
  NameHeaderDesc = 'nameHeader_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PointsAsc = 'points_ASC',
  PointsDesc = 'points_DESC',
  PageNumberAsc = 'pageNumber_ASC',
  PageNumberDesc = 'pageNumber_DESC',
  HasNextPageAsc = 'hasNextPage_ASC',
  HasNextPageDesc = 'hasNextPage_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}





export type LearnRewardFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  shortDescription_exists?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<Maybe<LearnRewardFilter>>>;
  AND?: Maybe<Array<Maybe<LearnRewardFilter>>>;
};


export enum LearnRewardOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}


export type LearnSysFilter = {
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  publishedAt_exists?: Maybe<Scalars['Boolean']>;
  publishedAt?: Maybe<Scalars['LearnDateTime']>;
  publishedAt_not?: Maybe<Scalars['LearnDateTime']>;
  publishedAt_in?: Maybe<Array<Maybe<Scalars['LearnDateTime']>>>;
  publishedAt_not_in?: Maybe<Array<Maybe<Scalars['LearnDateTime']>>>;
  publishedAt_gt?: Maybe<Scalars['LearnDateTime']>;
  publishedAt_gte?: Maybe<Scalars['LearnDateTime']>;
  publishedAt_lt?: Maybe<Scalars['LearnDateTime']>;
  publishedAt_lte?: Maybe<Scalars['LearnDateTime']>;
  firstPublishedAt_exists?: Maybe<Scalars['Boolean']>;
  firstPublishedAt?: Maybe<Scalars['LearnDateTime']>;
  firstPublishedAt_not?: Maybe<Scalars['LearnDateTime']>;
  firstPublishedAt_in?: Maybe<Array<Maybe<Scalars['LearnDateTime']>>>;
  firstPublishedAt_not_in?: Maybe<Array<Maybe<Scalars['LearnDateTime']>>>;
  firstPublishedAt_gt?: Maybe<Scalars['LearnDateTime']>;
  firstPublishedAt_gte?: Maybe<Scalars['LearnDateTime']>;
  firstPublishedAt_lt?: Maybe<Scalars['LearnDateTime']>;
  firstPublishedAt_lte?: Maybe<Scalars['LearnDateTime']>;
  publishedVersion_exists?: Maybe<Scalars['Boolean']>;
  publishedVersion?: Maybe<Scalars['Float']>;
  publishedVersion_not?: Maybe<Scalars['Float']>;
  publishedVersion_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  publishedVersion_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  publishedVersion_gt?: Maybe<Scalars['Float']>;
  publishedVersion_gte?: Maybe<Scalars['Float']>;
  publishedVersion_lt?: Maybe<Scalars['Float']>;
  publishedVersion_lte?: Maybe<Scalars['Float']>;
};



export type LearnTechnologyFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  image_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<LearnTechnologyFilter>>>;
  AND?: Maybe<Array<Maybe<LearnTechnologyFilter>>>;
};


export enum LearnTechnologyOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}



export type LearnTrackFilter = {
  difficulty?: Maybe<LearncfDifficultyNestedFilter>;
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  spotlighted_exists?: Maybe<Scalars['Boolean']>;
  spotlighted?: Maybe<Scalars['Boolean']>;
  spotlighted_not?: Maybe<Scalars['Boolean']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  previewProjectIds_exists?: Maybe<Scalars['Boolean']>;
  previewProjectIds_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  previewProjectIds_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  previewProjectIds_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  technologiesCollection_exists?: Maybe<Scalars['Boolean']>;
  lessonsCollection_exists?: Maybe<Scalars['Boolean']>;
  difficulty_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<LearnTrackFilter>>>;
  AND?: Maybe<Array<Maybe<LearnTrackFilter>>>;
};



export enum LearnTrackOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SpotlightedAsc = 'spotlighted_ASC',
  SpotlightedDesc = 'spotlighted_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}


export type LearncfDifficultyNestedFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  shortDescription_exists?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  hexCodeColor_exists?: Maybe<Scalars['Boolean']>;
  hexCodeColor?: Maybe<Scalars['String']>;
  hexCodeColor_not?: Maybe<Scalars['String']>;
  hexCodeColor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hexCodeColor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hexCodeColor_contains?: Maybe<Scalars['String']>;
  hexCodeColor_not_contains?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<Maybe<LearncfDifficultyNestedFilter>>>;
  AND?: Maybe<Array<Maybe<LearncfDifficultyNestedFilter>>>;
};

export type LearncfTrackNestedFilter = {
  sys?: Maybe<LearnSysFilter>;
  contentfulMetadata?: Maybe<LearnContentfulMetadataFilter>;
  name_exists?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  id_exists?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  id_not?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_contains?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  spotlighted_exists?: Maybe<Scalars['Boolean']>;
  spotlighted?: Maybe<Scalars['Boolean']>;
  spotlighted_not?: Maybe<Scalars['Boolean']>;
  description_exists?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  previewProjectIds_exists?: Maybe<Scalars['Boolean']>;
  previewProjectIds_contains_all?: Maybe<Array<Maybe<Scalars['String']>>>;
  previewProjectIds_contains_some?: Maybe<Array<Maybe<Scalars['String']>>>;
  previewProjectIds_contains_none?: Maybe<Array<Maybe<Scalars['String']>>>;
  technologiesCollection_exists?: Maybe<Scalars['Boolean']>;
  lessonsCollection_exists?: Maybe<Scalars['Boolean']>;
  difficulty_exists?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<Maybe<LearncfTrackNestedFilter>>>;
  AND?: Maybe<Array<Maybe<LearncfTrackNestedFilter>>>;
};






export enum ShowYourWorkResizeStrategy {
  Clamp = 'CLAMP',
  Clip = 'CLIP',
  Crop = 'CROP',
  Facearea = 'FACEAREA',
  Fill = 'FILL',
  Fillmax = 'FILLMAX',
  Max = 'MAX',
  Min = 'MIN',
  Scale = 'SCALE'
}


export type ShowcaseCreateJudgingPoolInput = {
  name: Scalars['String'];
  eventId?: Maybe<Scalars['String']>;
  regionId?: Maybe<Scalars['String']>;
  eventGroupId?: Maybe<Scalars['String']>;
  programId?: Maybe<Scalars['String']>;
  judgingCriteria: Array<ShowcaseJudgingCriteriaInput>;
};

export type ShowcaseCreateProjectInput = {
  name: Scalars['String'];
  type: ShowcaseProjectType;
  description?: Maybe<Scalars['String']>;
  priorExperience?: Maybe<Scalars['String']>;
  challengesEncountered?: Maybe<Scalars['String']>;
  codeLink?: Maybe<Scalars['String']>;
  viewLink?: Maybe<Scalars['String']>;
};


export type ShowcaseEditProjectInput = {
  name?: Maybe<Scalars['String']>;
  type?: Maybe<ShowcaseProjectType>;
  description?: Maybe<Scalars['String']>;
  priorExperience?: Maybe<Scalars['String']>;
  challengesEncountered?: Maybe<Scalars['String']>;
  codeLink?: Maybe<Scalars['String']>;
  viewLink?: Maybe<Scalars['String']>;
};



export type ShowcaseJudgingCriteriaInput = {
  name: Scalars['String'];
  weight: Scalars['Float'];
};





export enum ShowcaseMediaFilterType {
  Any = 'ANY',
  Images = 'IMAGES',
  Videos = 'VIDEOS',
  Audios = 'AUDIOS',
  Both = 'BOTH'
}

export enum ShowcaseMediaTopic {
  Team = 'TEAM',
  Demo = 'DEMO',
  Presentation = 'PRESENTATION',
  Judges = 'JUDGES'
}

export enum ShowcaseMediaType {
  Video = 'VIDEO',
  Image = 'IMAGE',
  Audio = 'AUDIO'
}



export enum ShowcaseMetadataVisibility {
  Public = 'PUBLIC',
  Private = 'PRIVATE',
  Admin = 'ADMIN'
}





export enum ShowcaseProjectOrderByArg {
  Newest = 'NEWEST',
  Oldest = 'OLDEST'
}

export enum ShowcaseProjectType {
  App = 'APP',
  Game = 'GAME',
  Vr = 'VR',
  Hardware = 'HARDWARE',
  Website = 'WEBSITE',
  Library = 'LIBRARY',
  Bot = 'BOT',
  Other = 'OTHER'
}

export type ShowcaseProjectsWhere = {
  event?: Maybe<Scalars['String']>;
  eventGroup?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  program?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  type?: Maybe<ShowcaseProjectType>;
  awarded?: Maybe<Scalars['Boolean']>;
  contains?: Maybe<Scalars['String']>;
  media?: Maybe<ShowcaseMediaFilterType>;
  mediaTopic?: Maybe<ShowcaseMediaTopic>;
};


export enum ShowcaseResizeStrategy {
  Clamp = 'CLAMP',
  Clip = 'CLIP',
  Crop = 'CROP',
  Facearea = 'FACEAREA',
  Fill = 'FILL',
  Fillmax = 'FILLMAX',
  Max = 'MAX',
  Min = 'MIN',
  Scale = 'SCALE'
}





export type CmsInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type CmsInfoQuery = { __typename?: 'Query', cms?: Maybe<{ __typename?: 'CmsQuery', programs?: Maybe<{ __typename?: 'CmsProgramCollection', items: Array<Maybe<{ __typename?: 'CmsProgram', name?: Maybe<string>, description?: Maybe<string> }>> }> }> };


export const CmsInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CmsInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"programs"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"limit"},"value":{"kind":"IntValue","value":"1"}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"webname"},"value":{"kind":"StringValue","value":"codecup","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]}}]}}]} as unknown as DocumentNode<CmsInfoQuery, CmsInfoQueryVariables>;